{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"source/images/1.jpeg","path":"images/1.jpeg","modified":1,"renderable":0},{"_id":"source/me/index.html","path":"me/index.html","modified":1,"renderable":0},{"_id":"source/me/css/38240665.jpeg","path":"me/css/38240665.jpeg","modified":1,"renderable":0},{"_id":"source/me/css/animate.css","path":"me/css/animate.css","modified":1,"renderable":0},{"_id":"source/me/css/bootstrap.min.css","path":"me/css/bootstrap.min.css","modified":1,"renderable":0},{"_id":"source/me/css/font-awesome.min.css","path":"me/css/font-awesome.min.css","modified":1,"renderable":0},{"_id":"source/me/css/templatemo-style.css","path":"me/css/templatemo-style.css","modified":1,"renderable":0},{"_id":"source/me/fonts/FontAwesome.otf","path":"me/fonts/FontAwesome.otf","modified":1,"renderable":0},{"_id":"source/me/fonts/fontawesome-webfont.eot","path":"me/fonts/fontawesome-webfont.eot","modified":1,"renderable":0},{"_id":"source/me/fonts/fontawesome-webfont.svg","path":"me/fonts/fontawesome-webfont.svg","modified":1,"renderable":0},{"_id":"source/me/fonts/fontawesome-webfont.ttf","path":"me/fonts/fontawesome-webfont.ttf","modified":1,"renderable":0},{"_id":"source/me/fonts/fontawesome-webfont.woff","path":"me/fonts/fontawesome-webfont.woff","modified":1,"renderable":0},{"_id":"source/me/fonts/fontawesome-webfont.woff2","path":"me/fonts/fontawesome-webfont.woff2","modified":1,"renderable":0},{"_id":"source/me/images/1.jpg","path":"me/images/1.jpg","modified":1,"renderable":0},{"_id":"source/me/images/2.jpg","path":"me/images/2.jpg","modified":1,"renderable":0},{"_id":"source/me/images/3.jpg","path":"me/images/3.jpg","modified":1,"renderable":0},{"_id":"source/me/images/4.jpg","path":"me/images/4.jpg","modified":1,"renderable":0},{"_id":"source/me/images/6.png","path":"me/images/6.png","modified":1,"renderable":0},{"_id":"source/me/images/7.png","path":"me/images/7.png","modified":1,"renderable":0},{"_id":"source/me/images/5.jpg","path":"me/images/5.jpg","modified":1,"renderable":0},{"_id":"source/me/images/about-img.jpg","path":"me/images/about-img.jpg","modified":1,"renderable":0},{"_id":"source/me/images/contact-img.jpg","path":"me/images/contact-img.jpg","modified":1,"renderable":0},{"_id":"source/me/images/education-img.jpg","path":"me/images/education-img.jpg","modified":1,"renderable":0},{"_id":"source/me/images/experience-img.jpg","path":"me/images/experience-img.jpg","modified":1,"renderable":0},{"_id":"source/me/images/home-img.jpg","path":"me/images/home-img.jpg","modified":1,"renderable":0},{"_id":"source/me/images/quotes-bg.jpg","path":"me/images/quotes-bg.jpg","modified":1,"renderable":0},{"_id":"source/me/js/bootstrap.min.js","path":"me/js/bootstrap.min.js","modified":1,"renderable":0},{"_id":"source/me/js/custom.js","path":"me/js/custom.js","modified":1,"renderable":0},{"_id":"source/me/js/jquery.js","path":"me/js/jquery.js","modified":1,"renderable":0},{"_id":"source/me/js/jquery.parallax.js","path":"me/js/jquery.parallax.js","modified":1,"renderable":0},{"_id":"source/me/js/smoothscroll.js","path":"me/js/smoothscroll.js","modified":1,"renderable":0},{"_id":"source/me/js/wow.min.js","path":"me/js/wow.min.js","modified":1,"renderable":0}],"Cache":[{"_id":"source/_data/styles.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675834534081},{"_id":"source/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675834534084},{"_id":"source/_data/next.cofnig.yml","hash":"a83ce221b365be88a328479819189d7867576f3f","modified":1675837180765},{"_id":"source/categories/index.md","hash":"13e1d75c2896c2b0b035e9a083eafec19263ecfb","modified":1675834534084},{"_id":"source/me/index.html","hash":"580d30e79b04297721203495f0fd357e3c4d3812","modified":1675838206623},{"_id":"source/images/1.jpeg","hash":"1923ef96d2b852b612c22104221b019ccc1d6c74","modified":1675837238348},{"_id":"source/tags/index.md","hash":"852337224d9fba464c8d0731fc4b79625dd1022e","modified":1675834534134},{"_id":"source/_posts/sql/202011172350.md","hash":"fdae0719e4ec257e7e35de962abfd62e874a4526","modified":1675846959906},{"_id":"source/_posts/sql/202012132016.md","hash":"07f84419e9c228c826633a6fd5c4cd4276245b74","modified":1675847875997},{"_id":"source/_posts/sql/202101172100.md","hash":"528dde3f26cc5b9f7f75c94e5fa2670d0b094837","modified":1675847934531},{"_id":"source/me/css/38240665.jpeg","hash":"da2a2db8f5b646b07f5e1b0de120865d3a48b910","modified":1675834534086},{"_id":"source/me/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1675834534088},{"_id":"source/me/css/templatemo-style.css","hash":"ef970e9968c857b17501161f9209c0cd36df2c0c","modified":1675834534088},{"_id":"source/me/images/1.jpg","hash":"a30a9a6cffed272c3f8d151e2c1942a5a686ee01","modified":1675834534095},{"_id":"source/me/js/bootstrap.min.js","hash":"c5c481ca5a263031d938f6c12abd2fe5fb4b6a83","modified":1675834534131},{"_id":"source/me/js/custom.js","hash":"a0b6c2de39af485e361d16a2273f6347cad1d4c0","modified":1675834534131},{"_id":"source/me/js/jquery.parallax.js","hash":"779cf65a01c7a093e01620918b1a80f0b9d8aa76","modified":1675834534132},{"_id":"source/me/js/wow.min.js","hash":"6e686e8163cbffe4b3db652a9075c1b3da51f56e","modified":1675834534133},{"_id":"source/me/js/smoothscroll.js","hash":"bff2b64fd90e5d5742157b715d9cde5170a3dfbe","modified":1675834534133},{"_id":"source/me/css/animate.css","hash":"699c96bb01e64b1761091c10e1373a37a131a72c","modified":1675834534086},{"_id":"source/me/css/bootstrap.min.css","hash":"c0a9529eaba059dc0082b0d9c01df73fc8680709","modified":1675834534087},{"_id":"source/me/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1675834534090},{"_id":"source/me/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1675834534090},{"_id":"source/me/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1675834534094},{"_id":"source/me/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1675834534095},{"_id":"source/me/images/5.jpg","hash":"a7bf817355002bafa1f4b2dd0a6126d9b0947743","modified":1675834534117},{"_id":"source/me/js/jquery.js","hash":"4fbe0563917d6f6289e4e1b4a0a8758e4e43bda9","modified":1675834534132},{"_id":"source/me/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1675834534093},{"_id":"source/me/images/2.jpg","hash":"c83ccfa2c055b04cf6c2f25f9c360cddc0234d4b","modified":1675834534097},{"_id":"source/me/images/contact-img.jpg","hash":"0606ca8f5a57ff05189563fd8c47e55b97a1f929","modified":1675834534125},{"_id":"source/me/images/7.png","hash":"2c14c7aa3ee9df59b077e26e6cdcc0212f6e1816","modified":1675834534122},{"_id":"source/me/images/quotes-bg.jpg","hash":"43bc383e328a1432518d10bf9c0d36730941d192","modified":1675834534130},{"_id":"source/me/images/about-img.jpg","hash":"e098285448ee8d3388fa0e0ae9977caa8ce2cc08","modified":1675834534124},{"_id":"source/me/images/experience-img.jpg","hash":"34dd9bbe6edaba6f9a4841a06005c3b0287d5a6c","modified":1675834534127},{"_id":"source/me/images/education-img.jpg","hash":"d1b256e9a979e4940b0d56c4b1d33b4ce72b095d","modified":1675834534126},{"_id":"source/me/images/home-img.jpg","hash":"2c9992080b972bf82a258572e7375e4bcccba687","modified":1675834534129},{"_id":"source/me/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1675834534092},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1675834968011},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1675834968011},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1675834968011},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1675834968017},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1675834968017},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1675834968017},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1675834968018},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1675834968018},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1675834968019},{"_id":"themes/next/_config.yml","hash":"a83ce221b365be88a328479819189d7867576f3f","modified":1675837279974},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1675834968030},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1675834968069},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1675834968012},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1675834968012},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1675834968014},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1675834968014},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1675834968015},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1675834968015},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1675834968015},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1675834968016},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1675834968016},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1675834968016},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1675834968017},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1675834968020},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1675834968021},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1675834968021},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1675834968021},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1675834968022},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1675834968023},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1675834968023},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1675834968023},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1675834968024},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1675834968031},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1675834968031},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1675834968031},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1675834968032},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1675834968032},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1675834968033},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1675834968034},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1675834968034},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1675834968034},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1675834968035},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1675834968035},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1675834968035},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1675834968035},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1675834968036},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1675834968037},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1675834968036},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1675834968037},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1675834968038},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1675834968037},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1675834968038},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1675834968038},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1675834968039},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1675834968067},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1675834968039},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1675834968068},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1675834968068},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1675834968068},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1675834968069},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1675834968069},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1675834968078},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1675834968013},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1675834968013},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1675834968013},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1675834968024},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1675834968013},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1675834968025},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1675834968025},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1675834968026},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1675834968027},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1675834968027},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1675834968027},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1675834968028},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1675834968028},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1675834968029},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1675834968029},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1675834968029},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1675834968040},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1675834968030},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1675834968040},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1675834968041},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1675834968041},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1675834968042},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1675834968045},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1675834968046},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1675834968050},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1675834968051},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1675834968051},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1675834968052},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1675834968054},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1675834968055},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1675834968058},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1675834968063},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1675834968061},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1675834968063},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1675834968070},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1675834968074},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1675834968075},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1675834968075},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1675834968075},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1675834968076},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1675834968076},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1675834968076},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1675834968077},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1675834968077},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1675834968078},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1675834968079},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1675834968079},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1675834968079},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1675834968079},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1675834968081},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1675834968081},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1675834968081},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1675834968082},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1675834968082},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1675834968081},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1675834968110},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1675834968121},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1675834968121},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1675834968121},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1675834968122},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1675834968122},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1675834968123},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1675834968123},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1675834968124},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1675834968124},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1675834968124},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1675834968124},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1675834968125},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1675834968125},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1675834968125},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1675834968127},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1675834968127},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1675834968126},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1675834968128},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1675834968127},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1675834968130},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1675834968129},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1675834968042},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1675834968042},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1675834968043},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1675834968043},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1675834968044},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1675834968044},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1675834968045},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1675834968046},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1675834968046},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1675834968047},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1675834968047},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1675834968047},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1675834968048},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1675834968048},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1675834968049},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1675834968049},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1675834968049},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1675834968050},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1675834968053},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1675834968053},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1675834968053},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1675834968054},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1675834968052},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1675834968056},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1675834968056},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1675834968057},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1675834968058},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1675834968056},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1675834968058},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1675834968059},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1675834968059},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1675834968060},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1675834968060},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1675834968060},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1675834968061},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1675834968062},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1675834968062},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1675834968062},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1675834968063},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1675834968064},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1675834968065},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1675834968065},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1675834968064},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1675834968066},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1675834968066},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1675834968066},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1675834968067},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1675834968070},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1675834968067},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1675834968071},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1675834968071},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1675834968072},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1675834968072},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1675834968073},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1675834968073},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1675834968073},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1675834968074},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1675834968074},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1675834968118},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1675834968074},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1675834968119},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1675834968120},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1675834968119},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1675834968120},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1675834968129},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1675834968128},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1675834968133},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1675834968134},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1675834968083},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1675834968084},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1675834968084},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1675834968091},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1675834968097},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1675834968097},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1675834968102},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1675834968103},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1675834968105},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1675834968103},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1675834968106},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1675834968106},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1675834968110},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1675834968111},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1675834968107},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1675834968112},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1675834968111},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1675834968112},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1675834968112},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1675834968113},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1675834968114},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1675834968113},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1675834968114},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1675834968115},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1675834968115},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1675834968115},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1675834968116},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1675834968116},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1675834968117},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1675834968117},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1675834968118},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1675834968118},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1675834968131},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1675834968132},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1675834968085},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1675834968085},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1675834968086},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1675834968085},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1675834968086},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1675834968087},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1675834968088},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1675834968088},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1675834968087},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1675834968089},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1675834968088},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1675834968089},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1675834968090},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1675834968089},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1675834968090},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1675834968090},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1675834968090},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1675834968091},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1675834968092},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1675834968091},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1675834968093},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1675834968093},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1675834968092},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1675834968094},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1675834968095},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1675834968094},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1675834968095},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1675834968096},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1675834968095},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1675834968096},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1675834968098},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1675834968096},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1675834968098},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1675834968099},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1675834968099},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1675834968099},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1675834968099},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1675834968101},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1675834968101},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1675834968101},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1675834968101},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1675834968104},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1675834968104},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1675834968104},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1675834968105},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1675834968107},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1675834968107},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1675834968108},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1675834968108},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1675834968109},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1675834968108},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1675834968109},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1675834968131},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1675834968133},{"_id":"source/me/images/6.png","hash":"b0c5bb05e213b7ba5b797992426ee856044abc9f","modified":1675834534121},{"_id":"source/me/images/3.jpg","hash":"3e3381a52aeaa4a3849ed029bf24dd4ba9ba25b8","modified":1675834534102},{"_id":"source/me/images/4.jpg","hash":"87f8bf05d90ed5917ff84952037f7663b8c317a6","modified":1675834534116},{"_id":"public/search.xml","hash":"337f8fa90f4e6765459c67382696adc3cc5f904f","modified":1675847958218},{"_id":"public/categories/index.html","hash":"a0640af587e42957f1bc6549611b6378d6b6d367","modified":1675847958218},{"_id":"public/about/index.html","hash":"43373c3170bef5ec57b96522a06869cc9b1d6a33","modified":1675847958218},{"_id":"public/tags/index.html","hash":"90d031d1a6c82c080d7f1f22a3d77cbf3d2d4079","modified":1675847958218},{"_id":"public/archives/2020/index.html","hash":"65076278057c1f77658474b90929f617861cb7f7","modified":1675847958218},{"_id":"public/archives/index.html","hash":"125f70d29be2e48e1103149061442f543af41ead","modified":1675847958218},{"_id":"public/archives/2020/11/index.html","hash":"6fb21b7537af5228af4e1d5909cf721abc231dad","modified":1675847958218},{"_id":"public/archives/2020/12/index.html","hash":"2e129b190a3c270bf5a0315af7687e1c068c1a1f","modified":1675847958218},{"_id":"public/archives/2021/index.html","hash":"2e5ba952c1a87a06a5b33155dc2fa6bfc8ced0ba","modified":1675847958218},{"_id":"public/archives/2021/01/index.html","hash":"f06d4b2e7dbaa2660bbfec4e9db3fdff2e83d4e5","modified":1675847958218},{"_id":"public/categories/資料庫/index.html","hash":"46ea5663fa67ba3be95ccc6682547f735772db91","modified":1675847958218},{"_id":"public/tags/資料庫/index.html","hash":"7399f4344257f5f2ab8b50d4499a80a6cd87935f","modified":1675847958218},{"_id":"public/2021/01/17/sql/202101172100/index.html","hash":"1cb3382e08c63504549e30f37fca937f13821988","modified":1675847958218},{"_id":"public/2020/12/23/sql/202012132016/index.html","hash":"516a348cf80a710fdabac269055ac2d6ddff3e62","modified":1675847958218},{"_id":"public/2020/11/17/sql/202011172350/index.html","hash":"7bbe98ecdf22a7402419e38a9f839d5b3bad472f","modified":1675847958218},{"_id":"public/index.html","hash":"c1e8f5696082fceada24a3be089049957d0ad7d5","modified":1675847958218},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1675847958218},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1675847958218},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1675847958218},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1675847958218},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1675847958218},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1675847958218},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1675847958218},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1675847958218},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1675847958218},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1675847958218},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1675847958218},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1675847958218},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1675847958218},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1675847958218},{"_id":"public/images/1.jpeg","hash":"1923ef96d2b852b612c22104221b019ccc1d6c74","modified":1675847958218},{"_id":"public/me/index.html","hash":"580d30e79b04297721203495f0fd357e3c4d3812","modified":1675847958218},{"_id":"public/me/css/38240665.jpeg","hash":"da2a2db8f5b646b07f5e1b0de120865d3a48b910","modified":1675847958218},{"_id":"public/me/css/templatemo-style.css","hash":"ef970e9968c857b17501161f9209c0cd36df2c0c","modified":1675847958218},{"_id":"public/me/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1675847958218},{"_id":"public/me/images/1.jpg","hash":"a30a9a6cffed272c3f8d151e2c1942a5a686ee01","modified":1675847958218},{"_id":"public/me/js/bootstrap.min.js","hash":"c5c481ca5a263031d938f6c12abd2fe5fb4b6a83","modified":1675847958218},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1675847958218},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1675847958218},{"_id":"public/me/css/animate.css","hash":"699c96bb01e64b1761091c10e1373a37a131a72c","modified":1675847958218},{"_id":"public/me/css/bootstrap.min.css","hash":"c0a9529eaba059dc0082b0d9c01df73fc8680709","modified":1675847958218},{"_id":"public/me/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1675847958218},{"_id":"public/me/js/custom.js","hash":"a0b6c2de39af485e361d16a2273f6347cad1d4c0","modified":1675847958218},{"_id":"public/me/js/jquery.parallax.js","hash":"779cf65a01c7a093e01620918b1a80f0b9d8aa76","modified":1675847958218},{"_id":"public/me/js/smoothscroll.js","hash":"bff2b64fd90e5d5742157b715d9cde5170a3dfbe","modified":1675847958218},{"_id":"public/me/js/wow.min.js","hash":"6e686e8163cbffe4b3db652a9075c1b3da51f56e","modified":1675847958218},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1675847958218},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1675847958218},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1675847958218},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1675847958218},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1675847958218},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1675847958218},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1675847958218},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1675847958218},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1675847958218},{"_id":"public/css/main.css","hash":"f919664ed4e106326b68ef755a278e6f624344b0","modified":1675847958218},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1675847958218},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1675847958218},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1675847958218},{"_id":"public/me/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1675847958218},{"_id":"public/me/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1675847958218},{"_id":"public/me/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1675847958218},{"_id":"public/me/images/5.jpg","hash":"a7bf817355002bafa1f4b2dd0a6126d9b0947743","modified":1675847958218},{"_id":"public/me/js/jquery.js","hash":"4fbe0563917d6f6289e4e1b4a0a8758e4e43bda9","modified":1675847958218},{"_id":"public/me/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1675847958218},{"_id":"public/me/images/2.jpg","hash":"c83ccfa2c055b04cf6c2f25f9c360cddc0234d4b","modified":1675847958218},{"_id":"public/me/images/7.png","hash":"2c14c7aa3ee9df59b077e26e6cdcc0212f6e1816","modified":1675847958218},{"_id":"public/me/images/contact-img.jpg","hash":"0606ca8f5a57ff05189563fd8c47e55b97a1f929","modified":1675847958218},{"_id":"public/me/images/quotes-bg.jpg","hash":"43bc383e328a1432518d10bf9c0d36730941d192","modified":1675847958218},{"_id":"public/me/images/about-img.jpg","hash":"e098285448ee8d3388fa0e0ae9977caa8ce2cc08","modified":1675847958218},{"_id":"public/me/images/education-img.jpg","hash":"d1b256e9a979e4940b0d56c4b1d33b4ce72b095d","modified":1675847958218},{"_id":"public/me/images/experience-img.jpg","hash":"34dd9bbe6edaba6f9a4841a06005c3b0287d5a6c","modified":1675847958218},{"_id":"public/me/images/home-img.jpg","hash":"2c9992080b972bf82a258572e7375e4bcccba687","modified":1675847958218},{"_id":"public/me/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1675847958218},{"_id":"public/me/images/6.png","hash":"b0c5bb05e213b7ba5b797992426ee856044abc9f","modified":1675847958218},{"_id":"public/me/images/3.jpg","hash":"3e3381a52aeaa4a3849ed029bf24dd4ba9ba25b8","modified":1675847958218},{"_id":"public/me/images/4.jpg","hash":"87f8bf05d90ed5917ff84952037f7663b8c317a6","modified":1675847958218}],"Category":[{"name":"資料庫","_id":"cldvglsvb0005j8vzg93805v6"}],"Data":[{"_id":"next.cofnig","data":{"override":false,"reminder":false,"cache":{"enable":true},"minify":false,"custom_file_path":{"style":"source/_data/styles.styl"},"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"language_switcher":false,"footer":{"icon":{"name":"fa fa-heart","animated":false,"color":"#ff0000"},"copyright":null,"powered":true,"beian":{"enable":false,"icp":null,"gongan_id":null,"gongan_num":null,"gongan_icon_url":null}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":false,"language":null},"scheme":"Pisces","darkmode":false,"menu":{"home":"/ || fa fa-home","about":"/me || fa fa-user","tags":"/tags/ || fa fa-tags","categories":"/categories/ || fa fa-th","archives":"/archives/ || fa fa-archive"},"menu_icons":{"enable":true},"menu_settings":{"icons":true,"badges":false},"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"avatar":{"url":"/images/1.jpeg","rounded":false,"rotated":false},"site_state":true,"social":{"GitHub":"https://github.com/LueZero || fab fa-github","E-Mail":"a0970937127@gmail.com || fa fa-envelope"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_settings":{"icon":"fa fa-link","title":"Links","layout":"block"},"links":null,"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"chat":{"enable":false,"icon":"fa fa-comment","text":"Chat"},"excerpt_description":true,"scroll_to_more":false,"auto_excerpt":{"enable":true,"length":100},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":false,"item_text_post":true,"item_text_total":false,"symbols":true,"time":true,"total_symbols":false,"total_time":false,"exclude_codeblock":false,"awl":4,"wpm":275,"suffix":"分鐘"},"tag_icon":false,"reward_settings":{"enable":false,"animation":false},"reward":null,"follow_me":null,"related_posts":{"enable":false,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name"},"post_navigation":"left","tagcloud":{"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":false,"show_result":false,"style":null}},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"reading_progress":{"enable":false,"position":"top","color":"#37c6c0","height":"3px"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/yourname","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"disable_baidu_transformation":false,"index_with_subtitle":false,"exturl":false,"google_site_verification":null,"bing_site_verification":null,"yandex_site_verification":null,"baidu_site_verification":null,"baidu_push":false,"math":{"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":false,"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"quicklink":{"enable":false,"home":false,"archive":false,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"disqus":{"enable":false,"shortname":null,"count":true},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"language":null,"visitor":false,"comment_count":true,"recordIP":false,"serverURLs":null},"livere_uid":null,"gitalk":{"enable":false,"github_id":null,"repo":null,"client_id":null,"client_secret":null,"admin_user":null,"distraction_free_mode":true,"language":null},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":null,"google_analytics":{"tracking_id":null,"only_pageview":false},"baidu_analytics":null,"growingio_analytics":null,"cnzz_siteid":null,"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null,"server_url":null,"security":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":false,"total_visitors":true,"total_visitors_icon":"fa fa-user","total_views":true,"total_views_icon":"fa fa-eye","post_views":true,"post_views_icon":"fa fa-eye"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"simple","icons":false,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true}},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":false,"theme":"minimal"},"three":{"enable":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","anime":null,"fontawesome":null,"mathjax":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":null,"jquery":null,"fancybox":null,"fancybox_css":null,"mediumzoom":null,"lazyload":null,"pangu":null,"quicklink":null,"disqusjs_js":null,"disqusjs_css":null,"valine":null,"gitalk_js":null,"gitalk_css":null,"algolia_search":null,"instant_search":null,"mermaid":null,"velocity":null,"velocity_ui":null,"pace":null,"pace_css":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null},"css":"css","js":"js","images":"images","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":false}}},{"_id":"styles","data":""}],"Page":[{"title":"categories","date":"2020-11-13T06:07:43.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-11-13 14:07:43\ntype: \"categories\"\ncomments: false\n---\n","updated":"2023-02-08T05:35:34.084Z","path":"categories/index.html","layout":"page","_id":"cldvglss10000j8vz7jikhmfx","content":"","site":{"data":{"next.cofnig":{"override":false,"reminder":false,"cache":{"enable":true},"minify":false,"custom_file_path":{"style":"source/_data/styles.styl"},"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"language_switcher":false,"footer":{"icon":{"name":"fa fa-heart","animated":false,"color":"#ff0000"},"copyright":null,"powered":true,"beian":{"enable":false,"icp":null,"gongan_id":null,"gongan_num":null,"gongan_icon_url":null}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":false,"language":null},"scheme":"Pisces","darkmode":false,"menu":{"home":"/ || fa fa-home","about":"/me || fa fa-user","tags":"/tags/ || fa fa-tags","categories":"/categories/ || fa fa-th","archives":"/archives/ || fa fa-archive"},"menu_icons":{"enable":true},"menu_settings":{"icons":true,"badges":false},"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"avatar":{"url":"/images/1.jpeg","rounded":false,"rotated":false},"site_state":true,"social":{"GitHub":"https://github.com/LueZero || fab fa-github","E-Mail":"a0970937127@gmail.com || fa fa-envelope"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_settings":{"icon":"fa fa-link","title":"Links","layout":"block"},"links":null,"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"chat":{"enable":false,"icon":"fa fa-comment","text":"Chat"},"excerpt_description":true,"scroll_to_more":false,"auto_excerpt":{"enable":true,"length":100},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":false,"item_text_post":true,"item_text_total":false,"symbols":true,"time":true,"total_symbols":false,"total_time":false,"exclude_codeblock":false,"awl":4,"wpm":275,"suffix":"分鐘"},"tag_icon":false,"reward_settings":{"enable":false,"animation":false},"reward":null,"follow_me":null,"related_posts":{"enable":false,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name"},"post_navigation":"left","tagcloud":{"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":false,"show_result":false,"style":null}},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"reading_progress":{"enable":false,"position":"top","color":"#37c6c0","height":"3px"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/yourname","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"disable_baidu_transformation":false,"index_with_subtitle":false,"exturl":false,"google_site_verification":null,"bing_site_verification":null,"yandex_site_verification":null,"baidu_site_verification":null,"baidu_push":false,"math":{"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":false,"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"quicklink":{"enable":false,"home":false,"archive":false,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"disqus":{"enable":false,"shortname":null,"count":true},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"language":null,"visitor":false,"comment_count":true,"recordIP":false,"serverURLs":null},"livere_uid":null,"gitalk":{"enable":false,"github_id":null,"repo":null,"client_id":null,"client_secret":null,"admin_user":null,"distraction_free_mode":true,"language":null},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":null,"google_analytics":{"tracking_id":null,"only_pageview":false},"baidu_analytics":null,"growingio_analytics":null,"cnzz_siteid":null,"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null,"server_url":null,"security":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":false,"total_visitors":true,"total_visitors_icon":"fa fa-user","total_views":true,"total_views_icon":"fa fa-eye","post_views":true,"post_views_icon":"fa fa-eye"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"simple","icons":false,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true}},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":false,"theme":"minimal"},"three":{"enable":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","anime":null,"fontawesome":null,"mathjax":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":null,"jquery":null,"fancybox":null,"fancybox_css":null,"mediumzoom":null,"lazyload":null,"pangu":null,"quicklink":null,"disqusjs_js":null,"disqusjs_css":null,"valine":null,"gitalk_js":null,"gitalk_css":null,"algolia_search":null,"instant_search":null,"mermaid":null,"velocity":null,"velocity_ui":null,"pace":null,"pace_css":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null},"css":"css","js":"js","images":"images","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":false}},"styles":""}},"excerpt":"","more":""},{"_content":"","source":"about/index.html","raw":"","date":"2023-02-08T05:35:34.084Z","updated":"2023-02-08T05:35:34.084Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cldvglss30001j8vz6x9004v1","content":"","site":{"data":{"next.cofnig":{"override":false,"reminder":false,"cache":{"enable":true},"minify":false,"custom_file_path":{"style":"source/_data/styles.styl"},"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"language_switcher":false,"footer":{"icon":{"name":"fa fa-heart","animated":false,"color":"#ff0000"},"copyright":null,"powered":true,"beian":{"enable":false,"icp":null,"gongan_id":null,"gongan_num":null,"gongan_icon_url":null}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":false,"language":null},"scheme":"Pisces","darkmode":false,"menu":{"home":"/ || fa fa-home","about":"/me || fa fa-user","tags":"/tags/ || fa fa-tags","categories":"/categories/ || fa fa-th","archives":"/archives/ || fa fa-archive"},"menu_icons":{"enable":true},"menu_settings":{"icons":true,"badges":false},"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"avatar":{"url":"/images/1.jpeg","rounded":false,"rotated":false},"site_state":true,"social":{"GitHub":"https://github.com/LueZero || fab fa-github","E-Mail":"a0970937127@gmail.com || fa fa-envelope"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_settings":{"icon":"fa fa-link","title":"Links","layout":"block"},"links":null,"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"chat":{"enable":false,"icon":"fa fa-comment","text":"Chat"},"excerpt_description":true,"scroll_to_more":false,"auto_excerpt":{"enable":true,"length":100},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":false,"item_text_post":true,"item_text_total":false,"symbols":true,"time":true,"total_symbols":false,"total_time":false,"exclude_codeblock":false,"awl":4,"wpm":275,"suffix":"分鐘"},"tag_icon":false,"reward_settings":{"enable":false,"animation":false},"reward":null,"follow_me":null,"related_posts":{"enable":false,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name"},"post_navigation":"left","tagcloud":{"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":false,"show_result":false,"style":null}},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"reading_progress":{"enable":false,"position":"top","color":"#37c6c0","height":"3px"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/yourname","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"disable_baidu_transformation":false,"index_with_subtitle":false,"exturl":false,"google_site_verification":null,"bing_site_verification":null,"yandex_site_verification":null,"baidu_site_verification":null,"baidu_push":false,"math":{"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":false,"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"quicklink":{"enable":false,"home":false,"archive":false,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"disqus":{"enable":false,"shortname":null,"count":true},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"language":null,"visitor":false,"comment_count":true,"recordIP":false,"serverURLs":null},"livere_uid":null,"gitalk":{"enable":false,"github_id":null,"repo":null,"client_id":null,"client_secret":null,"admin_user":null,"distraction_free_mode":true,"language":null},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":null,"google_analytics":{"tracking_id":null,"only_pageview":false},"baidu_analytics":null,"growingio_analytics":null,"cnzz_siteid":null,"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null,"server_url":null,"security":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":false,"total_visitors":true,"total_visitors_icon":"fa fa-user","total_views":true,"total_views_icon":"fa fa-eye","post_views":true,"post_views_icon":"fa fa-eye"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"simple","icons":false,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true}},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":false,"theme":"minimal"},"three":{"enable":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","anime":null,"fontawesome":null,"mathjax":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":null,"jquery":null,"fancybox":null,"fancybox_css":null,"mediumzoom":null,"lazyload":null,"pangu":null,"quicklink":null,"disqusjs_js":null,"disqusjs_css":null,"valine":null,"gitalk_js":null,"gitalk_css":null,"algolia_search":null,"instant_search":null,"mermaid":null,"velocity":null,"velocity_ui":null,"pace":null,"pace_css":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null},"css":"css","js":"js","images":"images","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":false}},"styles":""}},"excerpt":"","more":""},{"title":"tags","date":"2021-11-10T13:38:41.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-10 21:38:41\ntype: \"tags\"\ncomments: false\n---\n","updated":"2023-02-08T05:35:34.134Z","path":"tags/index.html","layout":"page","_id":"cldvglss40002j8vz39lrblij","content":"","site":{"data":{"next.cofnig":{"override":false,"reminder":false,"cache":{"enable":true},"minify":false,"custom_file_path":{"style":"source/_data/styles.styl"},"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"language_switcher":false,"footer":{"icon":{"name":"fa fa-heart","animated":false,"color":"#ff0000"},"copyright":null,"powered":true,"beian":{"enable":false,"icp":null,"gongan_id":null,"gongan_num":null,"gongan_icon_url":null}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":false,"language":null},"scheme":"Pisces","darkmode":false,"menu":{"home":"/ || fa fa-home","about":"/me || fa fa-user","tags":"/tags/ || fa fa-tags","categories":"/categories/ || fa fa-th","archives":"/archives/ || fa fa-archive"},"menu_icons":{"enable":true},"menu_settings":{"icons":true,"badges":false},"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"avatar":{"url":"/images/1.jpeg","rounded":false,"rotated":false},"site_state":true,"social":{"GitHub":"https://github.com/LueZero || fab fa-github","E-Mail":"a0970937127@gmail.com || fa fa-envelope"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_settings":{"icon":"fa fa-link","title":"Links","layout":"block"},"links":null,"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"chat":{"enable":false,"icon":"fa fa-comment","text":"Chat"},"excerpt_description":true,"scroll_to_more":false,"auto_excerpt":{"enable":true,"length":100},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":false,"item_text_post":true,"item_text_total":false,"symbols":true,"time":true,"total_symbols":false,"total_time":false,"exclude_codeblock":false,"awl":4,"wpm":275,"suffix":"分鐘"},"tag_icon":false,"reward_settings":{"enable":false,"animation":false},"reward":null,"follow_me":null,"related_posts":{"enable":false,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name"},"post_navigation":"left","tagcloud":{"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":false,"show_result":false,"style":null}},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"reading_progress":{"enable":false,"position":"top","color":"#37c6c0","height":"3px"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/yourname","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"disable_baidu_transformation":false,"index_with_subtitle":false,"exturl":false,"google_site_verification":null,"bing_site_verification":null,"yandex_site_verification":null,"baidu_site_verification":null,"baidu_push":false,"math":{"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":false,"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"quicklink":{"enable":false,"home":false,"archive":false,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"disqus":{"enable":false,"shortname":null,"count":true},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"language":null,"visitor":false,"comment_count":true,"recordIP":false,"serverURLs":null},"livere_uid":null,"gitalk":{"enable":false,"github_id":null,"repo":null,"client_id":null,"client_secret":null,"admin_user":null,"distraction_free_mode":true,"language":null},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":null,"google_analytics":{"tracking_id":null,"only_pageview":false},"baidu_analytics":null,"growingio_analytics":null,"cnzz_siteid":null,"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null,"server_url":null,"security":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":false,"total_visitors":true,"total_visitors_icon":"fa fa-user","total_views":true,"total_views_icon":"fa fa-eye","post_views":true,"post_views_icon":"fa fa-eye"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"simple","icons":false,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true}},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":false,"theme":"minimal"},"three":{"enable":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","anime":null,"fontawesome":null,"mathjax":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":null,"jquery":null,"fancybox":null,"fancybox_css":null,"mediumzoom":null,"lazyload":null,"pangu":null,"quicklink":null,"disqusjs_js":null,"disqusjs_css":null,"valine":null,"gitalk_js":null,"gitalk_css":null,"algolia_search":null,"instant_search":null,"mermaid":null,"velocity":null,"velocity_ui":null,"pace":null,"pace_css":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null},"css":"css","js":"js","images":"images","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":false}},"styles":""}},"excerpt":"","more":""}],"Post":[{"title":"SQL 達人的工作現場攻略筆記 - CH-3 自我連結使用方式","date":"2020-11-17T15:50:49.000Z","type":"tags","_content":"\n#### 前言\n\nSQL 提供連結會依照特徵命名，分別為**內部連結**、**外部連結**、**交叉連結**這些，且這些連結通常會以不同的資料表為對象，但 SQL 並未禁止同一張表用連結，此時在同一張資料表套用連結稱為**自我連結 self join**。\n\n#### 一、重複排序、排列、結合\n\n假設有張表商品與價錢資料表、其中共有蘋果、橘子、香蕉三筆記錄不得不製作業績表時候，必須取得商品組合。\n\n| name (產品名稱) | price (價錢) |\n| -------------- | ------------ |\n| 蘋果           | 100          |\n| 橘子           | 50           |\n| 香蕉           | 80           |\n\n說是組合其實組合的種類有兩種，一種是重視的排列順序**有序數對** (ordered pair)，另一種是不重視順序的**無序數對**(unordered pair)。要建立有序數對非常簡單，例如:\n\n```sql\n-- 建立重複排序SQL\nSELECT P1.name AS name_1, P2.name AS name_2　\nFROM Products P1 CROSS JOIN Products P2;\n```\n\n結果:\n\n| name_1 | name_2 |\n| ------ | ------ |\n| 蘋果   | 蘋果   |\n| 蘋果   | 橘子   |\n| 蘋果   | 香蕉   |\n| 橘子   | 蘋果   |\n| 橘子   | 橘子   |\n| 橘子   | 香蕉   |\n| 香蕉   | 蘋果   |\n| 香蕉   | 橘子   |\n| 香蕉   | 香蕉   |\n\n交叉連接為兩個資料表間的`笛卡兒乘積` (Cartesian product)，兩個資料表在結合時，不指定任何條件，即將兩個資料表中所有的可能排列組合出來。可以看到這種連結方式出現很多多餘的組合，這都是因為重視順序的集合，此外也可以將交叉連結寫成以下方式‧\n\n```sql\n-- 交叉連結另一種寫法\nSELECT P1.name AS name_1, P2.name AS name_2 FROM Products P1, Products P2;\n```\n\n此時作者卻說這種語法不要使用，原因是因為希望執行設有連結條件的內部連結，卻有可能忘記撰寫連結條件而變成交叉連結，產生預料之外的結果，交叉連結會消耗少不資源。接著將程式碼改寫成排除多餘的集合內容。首先排除(蘋果，蘋果)這種元素組合。\n\n```sql\n-- 取得排列 SQL\nSELECT P1.name AS name_1, P2.name AS name_2　\nFROM Products P1 INNER JOIN Products P2 ON P1.name <> P2.name;\n```\n\n結果:\n\n| name_1 | name_2 |\n| ------ | ------ |\n| 蘋果   | 橘子   |\n| 蘋果   | 香蕉   |\n| 橘子   | 蘋果   |\n| 橘子   | 香蕉   |\n| 香蕉   | 蘋果   |\n| 香蕉   | 橘子   |\n\n> ಠ_ಠ CROSS JOIN MYSQL 是舊版可能不支援此寫法，就會有使用 FROM table1, table2 方式。\n\n早期語法可能使用下列，但只要錯誤一步就有可能會寫成剛剛的交叉連結，所以盡可能不要使用此寫法。原因是因為忘記加上 WHERE 條件就會執行交叉連結，但若是使用 INNER JOIN 的語法就算忘記大部的 DBMS 都會視為語法錯誤。\n\n```sql\n-- 取得排列 SQL\nSELECT P1.name AS name_1, P2.name AS name_2　\nFROM Products P1, Products P2\nWHERE P1.name <> P2.name;\n```\n\n這裡說明如果上面忘記轉寫條件又會變成交叉連結，但使用 INNER JOIN 方式忘記寫條件系統就會噴錯，算是一種安全的寫法。接下來作者叫我們嘗試排除(蘋果、橘子)與(橘子、蘋果)這種只是調換順序組合。\n\n```sql\n-- 取得組合 SQL\nSELECT P1.name AS name_1, P2.name AS name_2\nFROM Products P1\nINNER JOIN Products P2 ON P1.name > P2.name\n```\n\n結果:\n\n| name_1 | name_2 |\n| ------ | ------ |\n| 蘋果   | 橘子   |\n| 香蕉   | 橘子   |\n| 香蕉   | 蘋果   |\n\n若想取得三種以上得組合，只需將程式碼改成以下內容。\n\n```sql\n-- 取得組合 SQL 擴充三欄位版本\nSELECT P1.name AS name_1,\n       P2.name AS name_2,　\n       P3.name AS name_3,\nFROM Products P1\nINNER JOIN Products P2 ON P1.name > P2.name\nINNER JOIN Products P3 ON P2.name > P3.name;\n```\n\n結果:\n\n| name_1 | name_2 | name_3 |\n| ------ | ------ | ------ |\n| 蘋果   | 橘子   | 香蕉   |\n\n除了例題使用的 = 之外，使用 >、<、<> 這種比較運算子連結稱為**非等值連結**。這種連結與自我連結一起使用也稱為**自我非等值連結**。這種一般來說不太會在商業邏輯使用，但會建立在欄位組合使用。\n\n#### 二、刪除重複列\n\n在關聯式資料世界裡，重複列與 NULL 差不多是令人討厭，所以也有許多排列重複列的方法因此問世。用剛剛產品資料表例子，試著排除重複出現橘子，而這張表沒有設定Key。\n\n```sql\n-- 刪除重複列SQL\nDELETE FROM Products P1\nWHERE rowid < (SELECT MAX(P2.rowid)\nFROM Products P2 WHERE P1.name = P2.name AND P1.price = P2.price);\n```\n\n這裡使用方式是虛擬欄位去取得列的編號因為這張表沒有設定 Key 關係，而在 MYSQL 中是名稱是使用`_rowid`，\n在 SQL 裡擁有不同名稱的集合被當成不同的集合，即使物理層級相同的存在，在邏輯層級仍屬於不同的存在。\n\n#### 三、部分不一致的 Key 搜尋\n\n| name (姓名) | family_id (家庭 ID) | address (地址)             |\n| ---------- | ------------------ | ------------------------- |\n| 許郁文     | 100                | 台北市萬華區長泰街 3-2-29 |\n| 許美美     | 100                | 台北市萬華區長泰街 3-2-92 |\n| 張瑋礽     | 200                | 台北市中正區南海路 2-8-1  |\n| 張銘仁     | 200                | 台北市中正區南海路 2-8-1  |\n| Holmes     | 300                | 貝克街 221B               |\n| Watson     | 400                | 貝克街 221B               |\n\n接下來將下列聯絡人資料表為例。主 Key 是人名，同一家族的人使用相同家族 ID，基本上同一家人會有相同的地址，但也有像是 Holmes 跟 Watson 這種還不是家人卻同居的情侶，書中是說將目光放在許家夫妻上，這兩個人並不是分居而是地址有誤，以這種情況如何篩選出是同一家人但地址卻不一致的紀錄呢?\n\n```sql\n-- 搜尋同一家人，地址不同的 SQL\nSELECT DISTINCT A1.name,A1.address\nFROM Address A1 INNER JOIN Address A2 ON A1.family_id = A2.family_id\nAND A1.address <> A2.address;\n```\n\n> 方法有很多種但如果是自我非等值連結撰寫，就能將程式碼寫得很簡潔。\n\n從下面商品資料表找出相同價格商品\n\n| name (商品名稱) | price (價格) |\n| -------------- | ----------- |\n| 蘋果           | 50          |\n| 橘子           | 100         |\n| 葡萄           | 50          |\n| 西瓜           | 80          |\n| 檸檬           | 30          |\n| 草莓           | 100         |\n| 香蕉           | 100         |\n\n```sql\n-- 搜尋價格相同，商品名稱卻不同 SQL\nSELECT DISTINCT A1.name,A1.price\nFROM Product A1 INNER JOIN Product A2 ON A1.price = A2.price\nAND A1.name <> A2.name\nORDER BY P1.price;\n```\n\n結果:\n\n| name (商品名稱) | price (價格) |\n| -------------- | ----------- |\n| 蘋果           | 50          |\n| 葡萄           | 50          |\n| 草莓           | 100         |\n| 橘子           | 100         |\n| 香蕉           | 100         |\n\n#### 四、總結\n\n自我連結就是利用自身表去找出想要的資料。\n\n1. 自我連結通常會與非等值連結搭配使用。\n\n2. 與 GROUP BY 組合可建立遞迴性集合。\n\n3. 想成是讓不同資料表連結。\n\n4. 從邏輯層級思考，而不是物理層級。\n\n參考資料: \n\n1. SQL 達人的工作現場攻略筆記","source":"_posts/sql/202011172350.md","raw":"---\ntitle: SQL 達人的工作現場攻略筆記 - CH-3 自我連結使用方式\ndate: 2020-11-17 23:50:49\ntype: \"tags\"\ncategories: 資料庫\ntags: 資料庫\n---\n\n#### 前言\n\nSQL 提供連結會依照特徵命名，分別為**內部連結**、**外部連結**、**交叉連結**這些，且這些連結通常會以不同的資料表為對象，但 SQL 並未禁止同一張表用連結，此時在同一張資料表套用連結稱為**自我連結 self join**。\n\n#### 一、重複排序、排列、結合\n\n假設有張表商品與價錢資料表、其中共有蘋果、橘子、香蕉三筆記錄不得不製作業績表時候，必須取得商品組合。\n\n| name (產品名稱) | price (價錢) |\n| -------------- | ------------ |\n| 蘋果           | 100          |\n| 橘子           | 50           |\n| 香蕉           | 80           |\n\n說是組合其實組合的種類有兩種，一種是重視的排列順序**有序數對** (ordered pair)，另一種是不重視順序的**無序數對**(unordered pair)。要建立有序數對非常簡單，例如:\n\n```sql\n-- 建立重複排序SQL\nSELECT P1.name AS name_1, P2.name AS name_2　\nFROM Products P1 CROSS JOIN Products P2;\n```\n\n結果:\n\n| name_1 | name_2 |\n| ------ | ------ |\n| 蘋果   | 蘋果   |\n| 蘋果   | 橘子   |\n| 蘋果   | 香蕉   |\n| 橘子   | 蘋果   |\n| 橘子   | 橘子   |\n| 橘子   | 香蕉   |\n| 香蕉   | 蘋果   |\n| 香蕉   | 橘子   |\n| 香蕉   | 香蕉   |\n\n交叉連接為兩個資料表間的`笛卡兒乘積` (Cartesian product)，兩個資料表在結合時，不指定任何條件，即將兩個資料表中所有的可能排列組合出來。可以看到這種連結方式出現很多多餘的組合，這都是因為重視順序的集合，此外也可以將交叉連結寫成以下方式‧\n\n```sql\n-- 交叉連結另一種寫法\nSELECT P1.name AS name_1, P2.name AS name_2 FROM Products P1, Products P2;\n```\n\n此時作者卻說這種語法不要使用，原因是因為希望執行設有連結條件的內部連結，卻有可能忘記撰寫連結條件而變成交叉連結，產生預料之外的結果，交叉連結會消耗少不資源。接著將程式碼改寫成排除多餘的集合內容。首先排除(蘋果，蘋果)這種元素組合。\n\n```sql\n-- 取得排列 SQL\nSELECT P1.name AS name_1, P2.name AS name_2　\nFROM Products P1 INNER JOIN Products P2 ON P1.name <> P2.name;\n```\n\n結果:\n\n| name_1 | name_2 |\n| ------ | ------ |\n| 蘋果   | 橘子   |\n| 蘋果   | 香蕉   |\n| 橘子   | 蘋果   |\n| 橘子   | 香蕉   |\n| 香蕉   | 蘋果   |\n| 香蕉   | 橘子   |\n\n> ಠ_ಠ CROSS JOIN MYSQL 是舊版可能不支援此寫法，就會有使用 FROM table1, table2 方式。\n\n早期語法可能使用下列，但只要錯誤一步就有可能會寫成剛剛的交叉連結，所以盡可能不要使用此寫法。原因是因為忘記加上 WHERE 條件就會執行交叉連結，但若是使用 INNER JOIN 的語法就算忘記大部的 DBMS 都會視為語法錯誤。\n\n```sql\n-- 取得排列 SQL\nSELECT P1.name AS name_1, P2.name AS name_2　\nFROM Products P1, Products P2\nWHERE P1.name <> P2.name;\n```\n\n這裡說明如果上面忘記轉寫條件又會變成交叉連結，但使用 INNER JOIN 方式忘記寫條件系統就會噴錯，算是一種安全的寫法。接下來作者叫我們嘗試排除(蘋果、橘子)與(橘子、蘋果)這種只是調換順序組合。\n\n```sql\n-- 取得組合 SQL\nSELECT P1.name AS name_1, P2.name AS name_2\nFROM Products P1\nINNER JOIN Products P2 ON P1.name > P2.name\n```\n\n結果:\n\n| name_1 | name_2 |\n| ------ | ------ |\n| 蘋果   | 橘子   |\n| 香蕉   | 橘子   |\n| 香蕉   | 蘋果   |\n\n若想取得三種以上得組合，只需將程式碼改成以下內容。\n\n```sql\n-- 取得組合 SQL 擴充三欄位版本\nSELECT P1.name AS name_1,\n       P2.name AS name_2,　\n       P3.name AS name_3,\nFROM Products P1\nINNER JOIN Products P2 ON P1.name > P2.name\nINNER JOIN Products P3 ON P2.name > P3.name;\n```\n\n結果:\n\n| name_1 | name_2 | name_3 |\n| ------ | ------ | ------ |\n| 蘋果   | 橘子   | 香蕉   |\n\n除了例題使用的 = 之外，使用 >、<、<> 這種比較運算子連結稱為**非等值連結**。這種連結與自我連結一起使用也稱為**自我非等值連結**。這種一般來說不太會在商業邏輯使用，但會建立在欄位組合使用。\n\n#### 二、刪除重複列\n\n在關聯式資料世界裡，重複列與 NULL 差不多是令人討厭，所以也有許多排列重複列的方法因此問世。用剛剛產品資料表例子，試著排除重複出現橘子，而這張表沒有設定Key。\n\n```sql\n-- 刪除重複列SQL\nDELETE FROM Products P1\nWHERE rowid < (SELECT MAX(P2.rowid)\nFROM Products P2 WHERE P1.name = P2.name AND P1.price = P2.price);\n```\n\n這裡使用方式是虛擬欄位去取得列的編號因為這張表沒有設定 Key 關係，而在 MYSQL 中是名稱是使用`_rowid`，\n在 SQL 裡擁有不同名稱的集合被當成不同的集合，即使物理層級相同的存在，在邏輯層級仍屬於不同的存在。\n\n#### 三、部分不一致的 Key 搜尋\n\n| name (姓名) | family_id (家庭 ID) | address (地址)             |\n| ---------- | ------------------ | ------------------------- |\n| 許郁文     | 100                | 台北市萬華區長泰街 3-2-29 |\n| 許美美     | 100                | 台北市萬華區長泰街 3-2-92 |\n| 張瑋礽     | 200                | 台北市中正區南海路 2-8-1  |\n| 張銘仁     | 200                | 台北市中正區南海路 2-8-1  |\n| Holmes     | 300                | 貝克街 221B               |\n| Watson     | 400                | 貝克街 221B               |\n\n接下來將下列聯絡人資料表為例。主 Key 是人名，同一家族的人使用相同家族 ID，基本上同一家人會有相同的地址，但也有像是 Holmes 跟 Watson 這種還不是家人卻同居的情侶，書中是說將目光放在許家夫妻上，這兩個人並不是分居而是地址有誤，以這種情況如何篩選出是同一家人但地址卻不一致的紀錄呢?\n\n```sql\n-- 搜尋同一家人，地址不同的 SQL\nSELECT DISTINCT A1.name,A1.address\nFROM Address A1 INNER JOIN Address A2 ON A1.family_id = A2.family_id\nAND A1.address <> A2.address;\n```\n\n> 方法有很多種但如果是自我非等值連結撰寫，就能將程式碼寫得很簡潔。\n\n從下面商品資料表找出相同價格商品\n\n| name (商品名稱) | price (價格) |\n| -------------- | ----------- |\n| 蘋果           | 50          |\n| 橘子           | 100         |\n| 葡萄           | 50          |\n| 西瓜           | 80          |\n| 檸檬           | 30          |\n| 草莓           | 100         |\n| 香蕉           | 100         |\n\n```sql\n-- 搜尋價格相同，商品名稱卻不同 SQL\nSELECT DISTINCT A1.name,A1.price\nFROM Product A1 INNER JOIN Product A2 ON A1.price = A2.price\nAND A1.name <> A2.name\nORDER BY P1.price;\n```\n\n結果:\n\n| name (商品名稱) | price (價格) |\n| -------------- | ----------- |\n| 蘋果           | 50          |\n| 葡萄           | 50          |\n| 草莓           | 100         |\n| 橘子           | 100         |\n| 香蕉           | 100         |\n\n#### 四、總結\n\n自我連結就是利用自身表去找出想要的資料。\n\n1. 自我連結通常會與非等值連結搭配使用。\n\n2. 與 GROUP BY 組合可建立遞迴性集合。\n\n3. 想成是讓不同資料表連結。\n\n4. 從邏輯層級思考，而不是物理層級。\n\n參考資料: \n\n1. SQL 達人的工作現場攻略筆記","slug":"sql/202011172350","published":1,"updated":"2023-02-08T09:02:39.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldvglsv80003j8vzc4t4a3bd","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>SQL 提供連結會依照特徵命名，分別為<strong>內部連結</strong>、<strong>外部連結</strong>、<strong>交叉連結</strong>這些，且這些連結通常會以不同的資料表為對象，但 SQL 並未禁止同一張表用連結，此時在同一張資料表套用連結稱為<strong>自我連結 self join</strong>。</p>\n<h4 id=\"一、重複排序、排列、結合\"><a href=\"#一、重複排序、排列、結合\" class=\"headerlink\" title=\"一、重複排序、排列、結合\"></a>一、重複排序、排列、結合</h4><p>假設有張表商品與價錢資料表、其中共有蘋果、橘子、香蕉三筆記錄不得不製作業績表時候，必須取得商品組合。</p>\n<table>\n<thead>\n<tr>\n<th>name (產品名稱)</th>\n<th>price (價錢)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>100</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>50</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>80</td>\n</tr>\n</tbody></table>\n<p>說是組合其實組合的種類有兩種，一種是重視的排列順序<strong>有序數對</strong> (ordered pair)，另一種是不重視順序的<strong>無序數對</strong>(unordered pair)。要建立有序數對非常簡單，例如:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 建立重複排序SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2　</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1 <span class=\"keyword\">CROSS</span> <span class=\"keyword\">JOIN</span> Products P2;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name_1</th>\n<th>name_2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>蘋果</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>蘋果</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>香蕉</td>\n</tr>\n</tbody></table>\n<p>交叉連接為兩個資料表間的<code>笛卡兒乘積</code> (Cartesian product)，兩個資料表在結合時，不指定任何條件，即將兩個資料表中所有的可能排列組合出來。可以看到這種連結方式出現很多多餘的組合，這都是因為重視順序的集合，此外也可以將交叉連結寫成以下方式‧</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 交叉連結另一種寫法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2 <span class=\"keyword\">FROM</span> Products P1, Products P2;</span><br></pre></td></tr></table></figure>\n\n<p>此時作者卻說這種語法不要使用，原因是因為希望執行設有連結條件的內部連結，卻有可能忘記撰寫連結條件而變成交叉連結，產生預料之外的結果，交叉連結會消耗少不資源。接著將程式碼改寫成排除多餘的集合內容。首先排除(蘋果，蘋果)這種元素組合。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 取得排列 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2　</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Products P2 <span class=\"keyword\">ON</span> P1.name &lt;&gt; P2.name;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name_1</th>\n<th>name_2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>蘋果</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>橘子</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>ಠ_ಠ CROSS JOIN MYSQL 是舊版可能不支援此寫法，就會有使用 FROM table1, table2 方式。</p>\n</blockquote>\n<p>早期語法可能使用下列，但只要錯誤一步就有可能會寫成剛剛的交叉連結，所以盡可能不要使用此寫法。原因是因為忘記加上 WHERE 條件就會執行交叉連結，但若是使用 INNER JOIN 的語法就算忘記大部的 DBMS 都會視為語法錯誤。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 取得排列 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2　</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1, Products P2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> P1.name &lt;&gt; P2.name;</span><br></pre></td></tr></table></figure>\n\n<p>這裡說明如果上面忘記轉寫條件又會變成交叉連結，但使用 INNER JOIN 方式忘記寫條件系統就會噴錯，算是一種安全的寫法。接下來作者叫我們嘗試排除(蘋果、橘子)與(橘子、蘋果)這種只是調換順序組合。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 取得組合 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Products P2 <span class=\"keyword\">ON</span> P1.name &gt; P2.name</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name_1</th>\n<th>name_2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>蘋果</td>\n</tr>\n</tbody></table>\n<p>若想取得三種以上得組合，只需將程式碼改成以下內容。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 取得組合 SQL 擴充三欄位版本</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1,</span><br><span class=\"line\">       P2.name <span class=\"keyword\">AS</span> name_2,　</span><br><span class=\"line\">       P3.name <span class=\"keyword\">AS</span> name_3,</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Products P2 <span class=\"keyword\">ON</span> P1.name &gt; P2.name</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Products P3 <span class=\"keyword\">ON</span> P2.name &gt; P3.name;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name_1</th>\n<th>name_2</th>\n<th>name_3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>橘子</td>\n<td>香蕉</td>\n</tr>\n</tbody></table>\n<p>除了例題使用的 = 之外，使用 &gt;、&lt;、&lt;&gt; 這種比較運算子連結稱為<strong>非等值連結</strong>。這種連結與自我連結一起使用也稱為<strong>自我非等值連結</strong>。這種一般來說不太會在商業邏輯使用，但會建立在欄位組合使用。</p>\n<h4 id=\"二、刪除重複列\"><a href=\"#二、刪除重複列\" class=\"headerlink\" title=\"二、刪除重複列\"></a>二、刪除重複列</h4><p>在關聯式資料世界裡，重複列與 NULL 差不多是令人討厭，所以也有許多排列重複列的方法因此問世。用剛剛產品資料表例子，試著排除重複出現橘子，而這張表沒有設定Key。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 刪除重複列SQL</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Products P1</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">rowid</span> &lt; (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(P2.rowid)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P2 <span class=\"keyword\">WHERE</span> P1.name = P2.name <span class=\"keyword\">AND</span> P1.price = P2.price);</span><br></pre></td></tr></table></figure>\n\n<p>這裡使用方式是虛擬欄位去取得列的編號因為這張表沒有設定 Key 關係，而在 MYSQL 中是名稱是使用<code>_rowid</code>，<br>在 SQL 裡擁有不同名稱的集合被當成不同的集合，即使物理層級相同的存在，在邏輯層級仍屬於不同的存在。</p>\n<h4 id=\"三、部分不一致的-Key-搜尋\"><a href=\"#三、部分不一致的-Key-搜尋\" class=\"headerlink\" title=\"三、部分不一致的 Key 搜尋\"></a>三、部分不一致的 Key 搜尋</h4><table>\n<thead>\n<tr>\n<th>name (姓名)</th>\n<th>family_id (家庭 ID)</th>\n<th>address (地址)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>許郁文</td>\n<td>100</td>\n<td>台北市萬華區長泰街 3-2-29</td>\n</tr>\n<tr>\n<td>許美美</td>\n<td>100</td>\n<td>台北市萬華區長泰街 3-2-92</td>\n</tr>\n<tr>\n<td>張瑋礽</td>\n<td>200</td>\n<td>台北市中正區南海路 2-8-1</td>\n</tr>\n<tr>\n<td>張銘仁</td>\n<td>200</td>\n<td>台北市中正區南海路 2-8-1</td>\n</tr>\n<tr>\n<td>Holmes</td>\n<td>300</td>\n<td>貝克街 221B</td>\n</tr>\n<tr>\n<td>Watson</td>\n<td>400</td>\n<td>貝克街 221B</td>\n</tr>\n</tbody></table>\n<p>接下來將下列聯絡人資料表為例。主 Key 是人名，同一家族的人使用相同家族 ID，基本上同一家人會有相同的地址，但也有像是 Holmes 跟 Watson 這種還不是家人卻同居的情侶，書中是說將目光放在許家夫妻上，這兩個人並不是分居而是地址有誤，以這種情況如何篩選出是同一家人但地址卻不一致的紀錄呢?</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 搜尋同一家人，地址不同的 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> A1.name,A1.address</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Address A1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Address A2 <span class=\"keyword\">ON</span> A1.family_id = A2.family_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> A1.address &lt;&gt; A2.address;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方法有很多種但如果是自我非等值連結撰寫，就能將程式碼寫得很簡潔。</p>\n</blockquote>\n<p>從下面商品資料表找出相同價格商品</p>\n<table>\n<thead>\n<tr>\n<th>name (商品名稱)</th>\n<th>price (價格)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>50</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>100</td>\n</tr>\n<tr>\n<td>葡萄</td>\n<td>50</td>\n</tr>\n<tr>\n<td>西瓜</td>\n<td>80</td>\n</tr>\n<tr>\n<td>檸檬</td>\n<td>30</td>\n</tr>\n<tr>\n<td>草莓</td>\n<td>100</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>100</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 搜尋價格相同，商品名稱卻不同 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> A1.name,A1.price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Product A1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Product A2 <span class=\"keyword\">ON</span> A1.price = A2.price</span><br><span class=\"line\"><span class=\"keyword\">AND</span> A1.name &lt;&gt; A2.name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> P1.price;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name (商品名稱)</th>\n<th>price (價格)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>50</td>\n</tr>\n<tr>\n<td>葡萄</td>\n<td>50</td>\n</tr>\n<tr>\n<td>草莓</td>\n<td>100</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>100</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>100</td>\n</tr>\n</tbody></table>\n<h4 id=\"四、總結\"><a href=\"#四、總結\" class=\"headerlink\" title=\"四、總結\"></a>四、總結</h4><p>自我連結就是利用自身表去找出想要的資料。</p>\n<ol>\n<li><p>自我連結通常會與非等值連結搭配使用。</p>\n</li>\n<li><p>與 GROUP BY 組合可建立遞迴性集合。</p>\n</li>\n<li><p>想成是讓不同資料表連結。</p>\n</li>\n<li><p>從邏輯層級思考，而不是物理層級。</p>\n</li>\n</ol>\n<p>參考資料: </p>\n<ol>\n<li>SQL 達人的工作現場攻略筆記</li>\n</ol>\n","site":{"data":{"next.cofnig":{"override":false,"reminder":false,"cache":{"enable":true},"minify":false,"custom_file_path":{"style":"source/_data/styles.styl"},"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"language_switcher":false,"footer":{"icon":{"name":"fa fa-heart","animated":false,"color":"#ff0000"},"copyright":null,"powered":true,"beian":{"enable":false,"icp":null,"gongan_id":null,"gongan_num":null,"gongan_icon_url":null}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":false,"language":null},"scheme":"Pisces","darkmode":false,"menu":{"home":"/ || fa fa-home","about":"/me || fa fa-user","tags":"/tags/ || fa fa-tags","categories":"/categories/ || fa fa-th","archives":"/archives/ || fa fa-archive"},"menu_icons":{"enable":true},"menu_settings":{"icons":true,"badges":false},"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"avatar":{"url":"/images/1.jpeg","rounded":false,"rotated":false},"site_state":true,"social":{"GitHub":"https://github.com/LueZero || fab fa-github","E-Mail":"a0970937127@gmail.com || fa fa-envelope"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_settings":{"icon":"fa fa-link","title":"Links","layout":"block"},"links":null,"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"chat":{"enable":false,"icon":"fa fa-comment","text":"Chat"},"excerpt_description":true,"scroll_to_more":false,"auto_excerpt":{"enable":true,"length":100},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":false,"item_text_post":true,"item_text_total":false,"symbols":true,"time":true,"total_symbols":false,"total_time":false,"exclude_codeblock":false,"awl":4,"wpm":275,"suffix":"分鐘"},"tag_icon":false,"reward_settings":{"enable":false,"animation":false},"reward":null,"follow_me":null,"related_posts":{"enable":false,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name"},"post_navigation":"left","tagcloud":{"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":false,"show_result":false,"style":null}},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"reading_progress":{"enable":false,"position":"top","color":"#37c6c0","height":"3px"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/yourname","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"disable_baidu_transformation":false,"index_with_subtitle":false,"exturl":false,"google_site_verification":null,"bing_site_verification":null,"yandex_site_verification":null,"baidu_site_verification":null,"baidu_push":false,"math":{"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":false,"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"quicklink":{"enable":false,"home":false,"archive":false,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"disqus":{"enable":false,"shortname":null,"count":true},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"language":null,"visitor":false,"comment_count":true,"recordIP":false,"serverURLs":null},"livere_uid":null,"gitalk":{"enable":false,"github_id":null,"repo":null,"client_id":null,"client_secret":null,"admin_user":null,"distraction_free_mode":true,"language":null},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":null,"google_analytics":{"tracking_id":null,"only_pageview":false},"baidu_analytics":null,"growingio_analytics":null,"cnzz_siteid":null,"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null,"server_url":null,"security":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":false,"total_visitors":true,"total_visitors_icon":"fa fa-user","total_views":true,"total_views_icon":"fa fa-eye","post_views":true,"post_views_icon":"fa fa-eye"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"simple","icons":false,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true}},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":false,"theme":"minimal"},"three":{"enable":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","anime":null,"fontawesome":null,"mathjax":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":null,"jquery":null,"fancybox":null,"fancybox_css":null,"mediumzoom":null,"lazyload":null,"pangu":null,"quicklink":null,"disqusjs_js":null,"disqusjs_css":null,"valine":null,"gitalk_js":null,"gitalk_css":null,"algolia_search":null,"instant_search":null,"mermaid":null,"velocity":null,"velocity_ui":null,"pace":null,"pace_css":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null},"css":"css","js":"js","images":"images","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":false}},"styles":""}},"excerpt":"前言\nSQL 提供連結會依照特徵命名，分別為內部連結、外部連結、交叉連結這些，且這些連結通常會以不同的資料表為對象，但 SQL 並未禁止同一張表用連結，此時在同一張資料表套用連結稱為自我連結 self join。\n\n一、重複排序、排列、結合\n假設有張表商品與價錢資料表、其中共有蘋果、橘子、香蕉三筆記錄不得不製作業績表時候，必須取得商品組合。\n\nname (產品名稱)price (價錢)蘋果100橘子50香蕉80說是組合其實組合的種類有兩種，一種是重視的排列順序有序數對 (ordered pair)，另一種是不重視順序的無序數對(unordered pair)。要建立有序數對非常簡單，例如:\n\n","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>SQL 提供連結會依照特徵命名，分別為<strong>內部連結</strong>、<strong>外部連結</strong>、<strong>交叉連結</strong>這些，且這些連結通常會以不同的資料表為對象，但 SQL 並未禁止同一張表用連結，此時在同一張資料表套用連結稱為<strong>自我連結 self join</strong>。</p>\n<h4 id=\"一、重複排序、排列、結合\"><a href=\"#一、重複排序、排列、結合\" class=\"headerlink\" title=\"一、重複排序、排列、結合\"></a>一、重複排序、排列、結合</h4><p>假設有張表商品與價錢資料表、其中共有蘋果、橘子、香蕉三筆記錄不得不製作業績表時候，必須取得商品組合。</p>\n<table>\n<thead>\n<tr>\n<th>name (產品名稱)</th>\n<th>price (價錢)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>100</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>50</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>80</td>\n</tr>\n</tbody></table>\n<p>說是組合其實組合的種類有兩種，一種是重視的排列順序<strong>有序數對</strong> (ordered pair)，另一種是不重視順序的<strong>無序數對</strong>(unordered pair)。要建立有序數對非常簡單，例如:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 建立重複排序SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2　</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1 <span class=\"keyword\">CROSS</span> <span class=\"keyword\">JOIN</span> Products P2;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name_1</th>\n<th>name_2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>蘋果</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>蘋果</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>香蕉</td>\n</tr>\n</tbody></table>\n<p>交叉連接為兩個資料表間的<code>笛卡兒乘積</code> (Cartesian product)，兩個資料表在結合時，不指定任何條件，即將兩個資料表中所有的可能排列組合出來。可以看到這種連結方式出現很多多餘的組合，這都是因為重視順序的集合，此外也可以將交叉連結寫成以下方式‧</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 交叉連結另一種寫法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2 <span class=\"keyword\">FROM</span> Products P1, Products P2;</span><br></pre></td></tr></table></figure>\n\n<p>此時作者卻說這種語法不要使用，原因是因為希望執行設有連結條件的內部連結，卻有可能忘記撰寫連結條件而變成交叉連結，產生預料之外的結果，交叉連結會消耗少不資源。接著將程式碼改寫成排除多餘的集合內容。首先排除(蘋果，蘋果)這種元素組合。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 取得排列 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2　</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Products P2 <span class=\"keyword\">ON</span> P1.name &lt;&gt; P2.name;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name_1</th>\n<th>name_2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>蘋果</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>香蕉</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>蘋果</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>橘子</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>ಠ_ಠ CROSS JOIN MYSQL 是舊版可能不支援此寫法，就會有使用 FROM table1, table2 方式。</p>\n</blockquote>\n<p>早期語法可能使用下列，但只要錯誤一步就有可能會寫成剛剛的交叉連結，所以盡可能不要使用此寫法。原因是因為忘記加上 WHERE 條件就會執行交叉連結，但若是使用 INNER JOIN 的語法就算忘記大部的 DBMS 都會視為語法錯誤。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 取得排列 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2　</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1, Products P2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> P1.name &lt;&gt; P2.name;</span><br></pre></td></tr></table></figure>\n\n<p>這裡說明如果上面忘記轉寫條件又會變成交叉連結，但使用 INNER JOIN 方式忘記寫條件系統就會噴錯，算是一種安全的寫法。接下來作者叫我們嘗試排除(蘋果、橘子)與(橘子、蘋果)這種只是調換順序組合。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 取得組合 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1, P2.name <span class=\"keyword\">AS</span> name_2</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Products P2 <span class=\"keyword\">ON</span> P1.name &gt; P2.name</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name_1</th>\n<th>name_2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>橘子</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>蘋果</td>\n</tr>\n</tbody></table>\n<p>若想取得三種以上得組合，只需將程式碼改成以下內容。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 取得組合 SQL 擴充三欄位版本</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> P1.name <span class=\"keyword\">AS</span> name_1,</span><br><span class=\"line\">       P2.name <span class=\"keyword\">AS</span> name_2,　</span><br><span class=\"line\">       P3.name <span class=\"keyword\">AS</span> name_3,</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P1</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Products P2 <span class=\"keyword\">ON</span> P1.name &gt; P2.name</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Products P3 <span class=\"keyword\">ON</span> P2.name &gt; P3.name;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name_1</th>\n<th>name_2</th>\n<th>name_3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>橘子</td>\n<td>香蕉</td>\n</tr>\n</tbody></table>\n<p>除了例題使用的 = 之外，使用 &gt;、&lt;、&lt;&gt; 這種比較運算子連結稱為<strong>非等值連結</strong>。這種連結與自我連結一起使用也稱為<strong>自我非等值連結</strong>。這種一般來說不太會在商業邏輯使用，但會建立在欄位組合使用。</p>\n<h4 id=\"二、刪除重複列\"><a href=\"#二、刪除重複列\" class=\"headerlink\" title=\"二、刪除重複列\"></a>二、刪除重複列</h4><p>在關聯式資料世界裡，重複列與 NULL 差不多是令人討厭，所以也有許多排列重複列的方法因此問世。用剛剛產品資料表例子，試著排除重複出現橘子，而這張表沒有設定Key。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 刪除重複列SQL</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Products P1</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">rowid</span> &lt; (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(P2.rowid)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Products P2 <span class=\"keyword\">WHERE</span> P1.name = P2.name <span class=\"keyword\">AND</span> P1.price = P2.price);</span><br></pre></td></tr></table></figure>\n\n<p>這裡使用方式是虛擬欄位去取得列的編號因為這張表沒有設定 Key 關係，而在 MYSQL 中是名稱是使用<code>_rowid</code>，<br>在 SQL 裡擁有不同名稱的集合被當成不同的集合，即使物理層級相同的存在，在邏輯層級仍屬於不同的存在。</p>\n<h4 id=\"三、部分不一致的-Key-搜尋\"><a href=\"#三、部分不一致的-Key-搜尋\" class=\"headerlink\" title=\"三、部分不一致的 Key 搜尋\"></a>三、部分不一致的 Key 搜尋</h4><table>\n<thead>\n<tr>\n<th>name (姓名)</th>\n<th>family_id (家庭 ID)</th>\n<th>address (地址)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>許郁文</td>\n<td>100</td>\n<td>台北市萬華區長泰街 3-2-29</td>\n</tr>\n<tr>\n<td>許美美</td>\n<td>100</td>\n<td>台北市萬華區長泰街 3-2-92</td>\n</tr>\n<tr>\n<td>張瑋礽</td>\n<td>200</td>\n<td>台北市中正區南海路 2-8-1</td>\n</tr>\n<tr>\n<td>張銘仁</td>\n<td>200</td>\n<td>台北市中正區南海路 2-8-1</td>\n</tr>\n<tr>\n<td>Holmes</td>\n<td>300</td>\n<td>貝克街 221B</td>\n</tr>\n<tr>\n<td>Watson</td>\n<td>400</td>\n<td>貝克街 221B</td>\n</tr>\n</tbody></table>\n<p>接下來將下列聯絡人資料表為例。主 Key 是人名，同一家族的人使用相同家族 ID，基本上同一家人會有相同的地址，但也有像是 Holmes 跟 Watson 這種還不是家人卻同居的情侶，書中是說將目光放在許家夫妻上，這兩個人並不是分居而是地址有誤，以這種情況如何篩選出是同一家人但地址卻不一致的紀錄呢?</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 搜尋同一家人，地址不同的 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> A1.name,A1.address</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Address A1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Address A2 <span class=\"keyword\">ON</span> A1.family_id = A2.family_id</span><br><span class=\"line\"><span class=\"keyword\">AND</span> A1.address &lt;&gt; A2.address;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方法有很多種但如果是自我非等值連結撰寫，就能將程式碼寫得很簡潔。</p>\n</blockquote>\n<p>從下面商品資料表找出相同價格商品</p>\n<table>\n<thead>\n<tr>\n<th>name (商品名稱)</th>\n<th>price (價格)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>50</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>100</td>\n</tr>\n<tr>\n<td>葡萄</td>\n<td>50</td>\n</tr>\n<tr>\n<td>西瓜</td>\n<td>80</td>\n</tr>\n<tr>\n<td>檸檬</td>\n<td>30</td>\n</tr>\n<tr>\n<td>草莓</td>\n<td>100</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>100</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 搜尋價格相同，商品名稱卻不同 SQL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> A1.name,A1.price</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Product A1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Product A2 <span class=\"keyword\">ON</span> A1.price = A2.price</span><br><span class=\"line\"><span class=\"keyword\">AND</span> A1.name &lt;&gt; A2.name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> P1.price;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>name (商品名稱)</th>\n<th>price (價格)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>蘋果</td>\n<td>50</td>\n</tr>\n<tr>\n<td>葡萄</td>\n<td>50</td>\n</tr>\n<tr>\n<td>草莓</td>\n<td>100</td>\n</tr>\n<tr>\n<td>橘子</td>\n<td>100</td>\n</tr>\n<tr>\n<td>香蕉</td>\n<td>100</td>\n</tr>\n</tbody></table>\n<h4 id=\"四、總結\"><a href=\"#四、總結\" class=\"headerlink\" title=\"四、總結\"></a>四、總結</h4><p>自我連結就是利用自身表去找出想要的資料。</p>\n<ol>\n<li><p>自我連結通常會與非等值連結搭配使用。</p>\n</li>\n<li><p>與 GROUP BY 組合可建立遞迴性集合。</p>\n</li>\n<li><p>想成是讓不同資料表連結。</p>\n</li>\n<li><p>從邏輯層級思考，而不是物理層級。</p>\n</li>\n</ol>\n<p>參考資料: </p>\n<ol>\n<li>SQL 達人的工作現場攻略筆記</li>\n</ol>\n"},{"title":"SQL 達人的工作現場攻略筆記 - CH-11 要讓 SQL 加速囉","date":"2020-12-23T12:16:00.000Z","type":"tags","_content":"\n## 前言\n\nSQL 的效能一直是 DB 工程師必須面對的主要課程之一，甚至有些人認為是唯一的課題。此文章是改善 SQL 的效能，讓執行速度更快減少更多資源。\n\n## 使用效率的搜尋\n\n#### 若子查詢為參數\n\n使用 EXISTS 代替 IN，在 IN 述詞很方便，也很好讀，但卻會遇到效能瓶頸的問題，若當 IN 參數 (1,2,3) 這種 List 時繼就不需要改寫，但如果以子查詢為參數就必須要注意，通常 NOT IN 跟 NOT EXISTS 都是回傳相同的結果，但是使用 EXISTS 建立子查詢卻快的很多。\n\nClass_A\n\n| id (識別子) |name (姓名) |\n| ----------| ------------ |\n| 1 | 郁 |\n| 2 | 瑋 |\n| 3 | 銘 |\n\nClass_B\n\n| id (識別子) | name (姓名) |\n| --------- | ------------ |\n| 1 | 郁 |\n| 2 | 瑋 |\n| 4 | 靚 |\n\n試著從 Class_A 表找出 Class_B 資料表也有的學生。\n\n```sql\n-- 較慢\nSELECT * FROM Class_A WHERE id IN ( SELECT id FROM Class_B);\n```\n\n```sql\n-- 較快\nSELECT * FROM Class_A A WHERE EXISTS ( SELECT id FROM Class_B B WHERE A.id = B.id );\n```\n\n結果:\n\n| id (識別子) | name (姓名) |\n| --------- | ------------ |\n| 1 | 郁 |\n| 2 | 瑋 |\n\n```sql\n-- 為什麼 EXISTS 會比較快?大致上有兩個理由。\n1. 如果連結key帶有索引值，就可能直接按照索引值，不需觀察 Class_B 的資料表。\n2. EXISTS 只要找到一筆符合的列，就會立刻停止搜尋，不會是 IN 得全面搜尋一遍。\n```\n\n#### 子查詢為參數時，使用連結代替 IN\n\n要改善 IN 的效能，除了使用 EXISTS 改寫，也可以利用連結方式去實現。\n\n```sql\nSELECT A.id,A.name FROM Class_A A INNER JOIN Class_B B ON A.id = B.id;\n```\n\n## 避開排序\n\nSQL 與程式語言不同，使用者無法直接命令 DBMS 指定排序運算，不過這不代表 DBMS 不執行排序，更精準的說是 DBMS 非常頻繁的偷偷執行排序，也導致使用者不用去理會哪中運算正在執行排序。\n\n會執行排序如下:\n\n1. GROUP BY\n2. ORDER BY\n3. 彙總函數 (SUM、COUNT、AVG、MAX、MIN)\n4. DISTINCT\n5. UNION、INTERSECT、EXCEPT\n6. 視窗函數 (RANK ROW_NUMBER)\n\n#### 善用集合運算的 ALL 選項\n\nSQL 具有 UNION、INTERSECT、EXCEPT 三種集合運算子，如果直接使用一定會為了排除重複資料而執行排序。\n\n```sql\nSELECT * FROM Class_A\nUNION\nSELECT * FROM Class_B;\n```\n\n結果:\n\n| id (識別子) | name (姓名) |\n| --------- | ------------ |\n| 1 | 郁 |\n| 2 | 瑋 |\n| 3 | 銘 |\n| 4 | 靚 |\n\n如果不用在乎重複資料或事先知道不會有重複資料，可以利用 UNION ALL 代替，避免執行排序。\n\n#### 以 EXISTS 代替 DISTINCT\n\nDISTINCT 也會為了排除重複資料而執行排序。若是為了統整兩張表連結結果而使用 DISTINCT 的情況，也可以使用 EXISTS 代替，也能避免執行排序。\n\nItems\n\n| item_no|item |\n| ----------| ------------ |\n| 10| SD 記憶卡 |\n| 20 | CD-R |\n| 30 | USB 隨身碟|\n| 40 | DVD|\n\nSalesHistory\n\n| sale_date | item_no | quantity |\n| --------- | ------------ | ------------ |\n| 2020-10-01 | 10 | 4 |\n| 2020-10-01 | 20 | 10 |\n| 2020-10-01 | 30 | 3 |\n| 2020-10-03 | 10 | 32 |\n| 2020-10-03 | 30 | 12 |\n| 2020-10-04 | 20 | 22 |\n| 2020-10-04 | 30 | 7 |\n\n根據上方商品主資料表選出業績表的商品，簡單說就是找出有業績的商品，此時書中說使用 IN 雖然不錯。但前面提到用連結會更好。\n\n```sql\nSELECT I.item_no FROM Items I INNER JOIN SalesHistory SH ON I.item_no = SH.item_no;\n```\n\n結果:\n\n| item_no |\n| --------- |\n| 10|\n| 10|\n| 20|\n| 20|\n| 30|\n| 30|\n| 30|\n\n由於是一對多連結，就會出現重複資料，若要將重複資料排除勢必使用 DISTINCT 那這樣就會執行到排序，所以書中說到最佳解答是使用 EXISTS，如此一來就不會執行排序。\n\n```sql\nSELECT item_no FROM Items I WHERE EXISTS(\n    SELECT * FROM SalesHistory SH WHERE I.item_no = SH.item_no\n);\n```\n\n## 於極值函數 MAX / MIN 使用索引值\n\nSQL內建 MAX 跟 MIN 函數，使用時都會進行排序，但如果參數欄位已有索引值，就只需要掃描到該索引值，不需要搜尋整張表。\n\n```sql\n-- 這段會需要搜尋整張表格\nSELECT MAX(item) FROM Items\n```\n\n```sql\n-- 這段可以使用到索引值\nSELECT MAX(item_no) FROM Items\n```\n\n由於 item_no 主鍵的索引值，所以效果更好，即時是複合索引值，只要有首欄位就能使用。雖然這種做法無法真的不排序，但至少可讓前半段搜尋變快，也能提高效率。\n\n## 寫在 WHERE 的條件不寫在 HAVING 上\n\n```sql\nSELECT sale_date, SUM(quantity)\nFROM SalesHistory \nGROUP BY sale_date HAVING sale_date = '2007-10-01';\n```\n\n```sql\nSELECT sale_date, SUM(quantity)\nFROM SalesHistory WHERE sale_date = '2007-10-01'\nGROUP BY sale_date;\n```\n\n結果:\n\n| sale_date | sum (quantity)|\n| --------- | -----\n| 2007-10-01 | 17 |\n\n從效能來看一定是後者，原因是第一個使用 GROUP BY 之後彙整進行排序與運算，所以減少列數，才能減輕排序時負擔。第二個就是 WHERE 條件可使用索引值。某種意義上，sale_date 應該是基數非常高的欄位，所以只要有索引值，應該就能讓列數有效率減少。\n\n#### GROUP BY 以及 ORDER BY 使用索引值\n\n這兩種方式雖然會執行排序，但只要在欄位上加上索引值，就能讓搜尋速度變快，尤其是 UNIQUE 索引值欄位，有些系統的規格更是能跳過排序。\n\n\n## 索引值真的派得上用場嗎?\n\n一般來說資料表有一定規模後，通常就會有索引值。把索引值想像成 C 語言的指標陣列，意思就是比起搜尋規模較大的物件，搜尋較小的指標會更有效率。\n\n1. 不是索引越多越好，索引可以加快查詢速度，但注意它是以空間換取時間。\n\n2. 懂的使用 Explain 來分析你的 SQL 索引性能解析，https://segmentfault.com/a/1190000008131735 。\n\n3. 索引不是建了就會使用。例如: SELECT * FROM user WHERE sex = 0 ( 0 代表女生 )，答案是不一定，如果大部份的值都是女生，那 MYSQL 會用全掃，如果大部份值為男生，那 MYSQL 會用索引。\n\n4. 連合索引的欄位順序，通常是由最左邊的欄位的才能使用。\n\n5. 儘可能使用索引的排序。\n\n6. 有時太多索引，反而會讓優化器混亂。\n\n#### 加工索引值欄位\n\n```sql\n--  NO\nSELECT * FROM SomeTable WHERE col_1 * 1.1 > 100;\n\n--  OK\nSELECT * FROM SomeTable WHERE col_1 > 100 / 1.1\n```\n\n若於搜尋條件右側使用公式，就會用到索引值。因此可以改成下列方式。同樣的在左側使用函數就無法使用到索引值。\n\n```sql\nSELECT * FROM SomeTable WHERE SUBSTR(col_1, 1, 1) = 'a';\n```\n\n如果非要左邊進行運算，書中說到可以用函數索引，但這種方式很麻煩也不太建議。\n\n* 使用索引值時候，欄位最好是乾淨的。\n\n#### 索引值欄位有NULL\n\n索引值有 NULL 是很難處理的，而且不同規格有不同處理的方式，這也是因為受到使用者使用 IS NULL 或是 IS NOT NULL，就無法使用索引值，或是 NULL 偏多的欄位無法使用索引的限制導致。此外該如何與 IS NOT NULL 同等條件使用索引值，可以使用下列方式\n\n```sql\n-- IS NOT NULL 替代方案\nSELECT * FROM SomeTable WHERE col_1 > 0;\n```\n\n#### 使用否定型的情況\n\n列出否定型不會使用索引值\n* <>\n* !=\n* NOT IN\n\n因此下列程式也無法取使用索引值。\n\n```sql\nSELECT * FROM SomeTable WHERE col_1 <> 100;\n```\n\n#### 使用 OR 的情況\n\n假設 col_1 與 col_2 各有索引值情況，或者 col_1, col_2 有複合索引，使 OR 撰寫連結條件，就無法使用索引值，而且就算可以使用，搜尋效率也會比 AND 差。\n\n```sql\nSELECT * FROM SomeTable WHERE col_1 > 1 OR col_2 = 'abc';\n```\n\n#### 再複合索引下，欄位順序是錯誤的\n\n假設以 col_1, col_2, col_3 這個順序下建立索引值，建立索引值欄位順序就相對重要。\n\n```sql\n-- O \nSELECT * FROM SomeTable WHERE col_1 ＝ 10 AND col_2 = 100 AND col_3 = 500;\n-- O \nSELECT * FROM SomeTable WHERE col_1 ＝ 10 AND col_2 = 100;\n-- X \nSELECT * FROM SomeTable WHERE col_1 ＝ 10 AND col_3 = 500;\n-- X \nSELECT * FROM SomeTable WHERE col_2 ＝ 100 AND col_3 = 500;\n```\n\n第一個欄位一定寫在開頭，順序不能錯亂。某些 DB 雖然可能順序錯誤情況也可以使用索引值，但是效能還是比順序正確時來得低。\n\n#### 使用後方一致或中間一致的LIKE\n\n```sql\n-- X \nSELECT * FROM SomeTable WHERE col_1 LIKE '%10' ;\n-- X \nSELECT * FROM SomeTable WHERE col_1 LIKE '%10%' ;\n-- O \nSELECT * FROM SomeTable WHERE col_1 LIKE '10%' ;\n```\n\n#### 會進行預設型態轉換\n\n下列是對字串類型的 col_1 設定條件的情況。\n\n```sql\n-- X \nSELECT * FROM SomeTable WHERE col_1 = 10 ;\n-- O \nSELECT * FROM SomeTable WHERE col_1 = '10' ;\n-- O \nSELECT * FROM SomeTable WHERE col_1 = CAST(10,AS CHAR(2));\n```\n\n## 減少中介資料表\n\nSQL 會將子查詢結果為新的資料表，也能在程式碼裡，像是操作原始資料表一般操作。這種高正交性讓 SQL 程式碼更加靈活，但若是大量使用中介資料也會造成性能下滑，所以盡可能減少中介資料。\n\n```sql\nSELECT * FROM(\n    SELECT sale_date, MAX(quantity) AS max_qty FROM SalesHistory GROUP BY sale_date\n) TMP --多餘的中介資料\nWHERE max_qty >= 10;\n```\n\n不過，要將彙整的結果設定條件，是不需要建立多餘中介資料，只需要使用下列 HAVING 陳述句。\n\n```sql\nSELECT sale_date, MAX(quantity) AS max_qty FROM SalesHistory GROUP BY sale_date HAVING MAX(quantity) >= 10;\n```\nHAVING 會一邊執行，一邊進行彙整，所以會比建立中介資料表之後才執行 WHERE 更有效率，且可讀性比較好。\n\n## 利用IN使用多個 KEY 時，將 KEY 整理在同一個位置\n\n自從 SQL-92 之後，就內建許多列間比較的功能，所以 =、<、> 這類比較或 IN 的參數不僅可以是純量，還能是 LIST。讓我們想想下列這種使用多個 Key 組成 IN 內容情況。\n\n```sql\nSELECT id, state, city FROM Address1 A1 \nWHERE \nstatus IN(\n    SELECT status FROM Address2 A2 WHERE A1.id = A2.id      \n) AND city IN (\n    SELECT city FROM Address2 A2 WHERE A1.id = A2.id      \n)\n```\n\n```sql\nSELECT * FROM Address1 A1 WHERE id || status || city IN(\n    SELECT id || state || city FROM Address1 A2);\n)\n```\n\n如此一來既可將子查詢寫成非關聯式類型，還能將搜尋減少為一次，如果是支援列間比較 DB，還能如下在 IN 的參數設定欄位組合。\n\n```sql\nSELECT * FROM Address1 A1 WHERE (id, status, city) IN(\n    SELECT id , state , city FROM Address1 A2);\n)\n```\n\n相較於合併字串，這個方法有兩個優點。其一是不用擔心連結的類型轉換，另一個需要加工欄位，所以可使用索引值。\n\n## 先連結在彙整\n\n當需要連結使用，盡可能先連結在彙整，才能省去建立中介資料的步驟。之所以能夠省略，全在於集合運算的連結屬於乘法，若具一對一或是一對多的關聯性\n，列數不會在連結之際增加。\n\n## 計畫性地使用視圖\n\n視圖是非常方便的工具，但如果隨便訂了複雜的視圖將使效能下降，尤其定義是圖的查詢含有下列運算時，SQL 的效率將變得更差，執行速度也會出乎意料的下滑。\n\n#### 總結\n\n    1.在 IN 使用子查詢，可以利用EXISTS或改寫連結。\n    2.使用索引值，基本上左邊是空白的。\n    3.SQL 雖然不需要明定排序部分，但有許多運算會偷偷執行排序，需多加留意。\n    4.盡可能減少不需要的中介資料。\n    5.趁早撰寫能減少紀錄筆數的條件。\n\n參考資料: \n\n1. SQL 達人的工作現場攻略筆記\n\n2. https://ithelp.ithome.com.tw/articles/10221971","source":"_posts/sql/202012132016.md","raw":"---\ntitle: SQL 達人的工作現場攻略筆記 - CH-11 要讓 SQL 加速囉\ndate: 2020-12-23 20:16:00\ntype: \"tags\"\ncategories: 資料庫\ntags: 資料庫\n---\n\n## 前言\n\nSQL 的效能一直是 DB 工程師必須面對的主要課程之一，甚至有些人認為是唯一的課題。此文章是改善 SQL 的效能，讓執行速度更快減少更多資源。\n\n## 使用效率的搜尋\n\n#### 若子查詢為參數\n\n使用 EXISTS 代替 IN，在 IN 述詞很方便，也很好讀，但卻會遇到效能瓶頸的問題，若當 IN 參數 (1,2,3) 這種 List 時繼就不需要改寫，但如果以子查詢為參數就必須要注意，通常 NOT IN 跟 NOT EXISTS 都是回傳相同的結果，但是使用 EXISTS 建立子查詢卻快的很多。\n\nClass_A\n\n| id (識別子) |name (姓名) |\n| ----------| ------------ |\n| 1 | 郁 |\n| 2 | 瑋 |\n| 3 | 銘 |\n\nClass_B\n\n| id (識別子) | name (姓名) |\n| --------- | ------------ |\n| 1 | 郁 |\n| 2 | 瑋 |\n| 4 | 靚 |\n\n試著從 Class_A 表找出 Class_B 資料表也有的學生。\n\n```sql\n-- 較慢\nSELECT * FROM Class_A WHERE id IN ( SELECT id FROM Class_B);\n```\n\n```sql\n-- 較快\nSELECT * FROM Class_A A WHERE EXISTS ( SELECT id FROM Class_B B WHERE A.id = B.id );\n```\n\n結果:\n\n| id (識別子) | name (姓名) |\n| --------- | ------------ |\n| 1 | 郁 |\n| 2 | 瑋 |\n\n```sql\n-- 為什麼 EXISTS 會比較快?大致上有兩個理由。\n1. 如果連結key帶有索引值，就可能直接按照索引值，不需觀察 Class_B 的資料表。\n2. EXISTS 只要找到一筆符合的列，就會立刻停止搜尋，不會是 IN 得全面搜尋一遍。\n```\n\n#### 子查詢為參數時，使用連結代替 IN\n\n要改善 IN 的效能，除了使用 EXISTS 改寫，也可以利用連結方式去實現。\n\n```sql\nSELECT A.id,A.name FROM Class_A A INNER JOIN Class_B B ON A.id = B.id;\n```\n\n## 避開排序\n\nSQL 與程式語言不同，使用者無法直接命令 DBMS 指定排序運算，不過這不代表 DBMS 不執行排序，更精準的說是 DBMS 非常頻繁的偷偷執行排序，也導致使用者不用去理會哪中運算正在執行排序。\n\n會執行排序如下:\n\n1. GROUP BY\n2. ORDER BY\n3. 彙總函數 (SUM、COUNT、AVG、MAX、MIN)\n4. DISTINCT\n5. UNION、INTERSECT、EXCEPT\n6. 視窗函數 (RANK ROW_NUMBER)\n\n#### 善用集合運算的 ALL 選項\n\nSQL 具有 UNION、INTERSECT、EXCEPT 三種集合運算子，如果直接使用一定會為了排除重複資料而執行排序。\n\n```sql\nSELECT * FROM Class_A\nUNION\nSELECT * FROM Class_B;\n```\n\n結果:\n\n| id (識別子) | name (姓名) |\n| --------- | ------------ |\n| 1 | 郁 |\n| 2 | 瑋 |\n| 3 | 銘 |\n| 4 | 靚 |\n\n如果不用在乎重複資料或事先知道不會有重複資料，可以利用 UNION ALL 代替，避免執行排序。\n\n#### 以 EXISTS 代替 DISTINCT\n\nDISTINCT 也會為了排除重複資料而執行排序。若是為了統整兩張表連結結果而使用 DISTINCT 的情況，也可以使用 EXISTS 代替，也能避免執行排序。\n\nItems\n\n| item_no|item |\n| ----------| ------------ |\n| 10| SD 記憶卡 |\n| 20 | CD-R |\n| 30 | USB 隨身碟|\n| 40 | DVD|\n\nSalesHistory\n\n| sale_date | item_no | quantity |\n| --------- | ------------ | ------------ |\n| 2020-10-01 | 10 | 4 |\n| 2020-10-01 | 20 | 10 |\n| 2020-10-01 | 30 | 3 |\n| 2020-10-03 | 10 | 32 |\n| 2020-10-03 | 30 | 12 |\n| 2020-10-04 | 20 | 22 |\n| 2020-10-04 | 30 | 7 |\n\n根據上方商品主資料表選出業績表的商品，簡單說就是找出有業績的商品，此時書中說使用 IN 雖然不錯。但前面提到用連結會更好。\n\n```sql\nSELECT I.item_no FROM Items I INNER JOIN SalesHistory SH ON I.item_no = SH.item_no;\n```\n\n結果:\n\n| item_no |\n| --------- |\n| 10|\n| 10|\n| 20|\n| 20|\n| 30|\n| 30|\n| 30|\n\n由於是一對多連結，就會出現重複資料，若要將重複資料排除勢必使用 DISTINCT 那這樣就會執行到排序，所以書中說到最佳解答是使用 EXISTS，如此一來就不會執行排序。\n\n```sql\nSELECT item_no FROM Items I WHERE EXISTS(\n    SELECT * FROM SalesHistory SH WHERE I.item_no = SH.item_no\n);\n```\n\n## 於極值函數 MAX / MIN 使用索引值\n\nSQL內建 MAX 跟 MIN 函數，使用時都會進行排序，但如果參數欄位已有索引值，就只需要掃描到該索引值，不需要搜尋整張表。\n\n```sql\n-- 這段會需要搜尋整張表格\nSELECT MAX(item) FROM Items\n```\n\n```sql\n-- 這段可以使用到索引值\nSELECT MAX(item_no) FROM Items\n```\n\n由於 item_no 主鍵的索引值，所以效果更好，即時是複合索引值，只要有首欄位就能使用。雖然這種做法無法真的不排序，但至少可讓前半段搜尋變快，也能提高效率。\n\n## 寫在 WHERE 的條件不寫在 HAVING 上\n\n```sql\nSELECT sale_date, SUM(quantity)\nFROM SalesHistory \nGROUP BY sale_date HAVING sale_date = '2007-10-01';\n```\n\n```sql\nSELECT sale_date, SUM(quantity)\nFROM SalesHistory WHERE sale_date = '2007-10-01'\nGROUP BY sale_date;\n```\n\n結果:\n\n| sale_date | sum (quantity)|\n| --------- | -----\n| 2007-10-01 | 17 |\n\n從效能來看一定是後者，原因是第一個使用 GROUP BY 之後彙整進行排序與運算，所以減少列數，才能減輕排序時負擔。第二個就是 WHERE 條件可使用索引值。某種意義上，sale_date 應該是基數非常高的欄位，所以只要有索引值，應該就能讓列數有效率減少。\n\n#### GROUP BY 以及 ORDER BY 使用索引值\n\n這兩種方式雖然會執行排序，但只要在欄位上加上索引值，就能讓搜尋速度變快，尤其是 UNIQUE 索引值欄位，有些系統的規格更是能跳過排序。\n\n\n## 索引值真的派得上用場嗎?\n\n一般來說資料表有一定規模後，通常就會有索引值。把索引值想像成 C 語言的指標陣列，意思就是比起搜尋規模較大的物件，搜尋較小的指標會更有效率。\n\n1. 不是索引越多越好，索引可以加快查詢速度，但注意它是以空間換取時間。\n\n2. 懂的使用 Explain 來分析你的 SQL 索引性能解析，https://segmentfault.com/a/1190000008131735 。\n\n3. 索引不是建了就會使用。例如: SELECT * FROM user WHERE sex = 0 ( 0 代表女生 )，答案是不一定，如果大部份的值都是女生，那 MYSQL 會用全掃，如果大部份值為男生，那 MYSQL 會用索引。\n\n4. 連合索引的欄位順序，通常是由最左邊的欄位的才能使用。\n\n5. 儘可能使用索引的排序。\n\n6. 有時太多索引，反而會讓優化器混亂。\n\n#### 加工索引值欄位\n\n```sql\n--  NO\nSELECT * FROM SomeTable WHERE col_1 * 1.1 > 100;\n\n--  OK\nSELECT * FROM SomeTable WHERE col_1 > 100 / 1.1\n```\n\n若於搜尋條件右側使用公式，就會用到索引值。因此可以改成下列方式。同樣的在左側使用函數就無法使用到索引值。\n\n```sql\nSELECT * FROM SomeTable WHERE SUBSTR(col_1, 1, 1) = 'a';\n```\n\n如果非要左邊進行運算，書中說到可以用函數索引，但這種方式很麻煩也不太建議。\n\n* 使用索引值時候，欄位最好是乾淨的。\n\n#### 索引值欄位有NULL\n\n索引值有 NULL 是很難處理的，而且不同規格有不同處理的方式，這也是因為受到使用者使用 IS NULL 或是 IS NOT NULL，就無法使用索引值，或是 NULL 偏多的欄位無法使用索引的限制導致。此外該如何與 IS NOT NULL 同等條件使用索引值，可以使用下列方式\n\n```sql\n-- IS NOT NULL 替代方案\nSELECT * FROM SomeTable WHERE col_1 > 0;\n```\n\n#### 使用否定型的情況\n\n列出否定型不會使用索引值\n* <>\n* !=\n* NOT IN\n\n因此下列程式也無法取使用索引值。\n\n```sql\nSELECT * FROM SomeTable WHERE col_1 <> 100;\n```\n\n#### 使用 OR 的情況\n\n假設 col_1 與 col_2 各有索引值情況，或者 col_1, col_2 有複合索引，使 OR 撰寫連結條件，就無法使用索引值，而且就算可以使用，搜尋效率也會比 AND 差。\n\n```sql\nSELECT * FROM SomeTable WHERE col_1 > 1 OR col_2 = 'abc';\n```\n\n#### 再複合索引下，欄位順序是錯誤的\n\n假設以 col_1, col_2, col_3 這個順序下建立索引值，建立索引值欄位順序就相對重要。\n\n```sql\n-- O \nSELECT * FROM SomeTable WHERE col_1 ＝ 10 AND col_2 = 100 AND col_3 = 500;\n-- O \nSELECT * FROM SomeTable WHERE col_1 ＝ 10 AND col_2 = 100;\n-- X \nSELECT * FROM SomeTable WHERE col_1 ＝ 10 AND col_3 = 500;\n-- X \nSELECT * FROM SomeTable WHERE col_2 ＝ 100 AND col_3 = 500;\n```\n\n第一個欄位一定寫在開頭，順序不能錯亂。某些 DB 雖然可能順序錯誤情況也可以使用索引值，但是效能還是比順序正確時來得低。\n\n#### 使用後方一致或中間一致的LIKE\n\n```sql\n-- X \nSELECT * FROM SomeTable WHERE col_1 LIKE '%10' ;\n-- X \nSELECT * FROM SomeTable WHERE col_1 LIKE '%10%' ;\n-- O \nSELECT * FROM SomeTable WHERE col_1 LIKE '10%' ;\n```\n\n#### 會進行預設型態轉換\n\n下列是對字串類型的 col_1 設定條件的情況。\n\n```sql\n-- X \nSELECT * FROM SomeTable WHERE col_1 = 10 ;\n-- O \nSELECT * FROM SomeTable WHERE col_1 = '10' ;\n-- O \nSELECT * FROM SomeTable WHERE col_1 = CAST(10,AS CHAR(2));\n```\n\n## 減少中介資料表\n\nSQL 會將子查詢結果為新的資料表，也能在程式碼裡，像是操作原始資料表一般操作。這種高正交性讓 SQL 程式碼更加靈活，但若是大量使用中介資料也會造成性能下滑，所以盡可能減少中介資料。\n\n```sql\nSELECT * FROM(\n    SELECT sale_date, MAX(quantity) AS max_qty FROM SalesHistory GROUP BY sale_date\n) TMP --多餘的中介資料\nWHERE max_qty >= 10;\n```\n\n不過，要將彙整的結果設定條件，是不需要建立多餘中介資料，只需要使用下列 HAVING 陳述句。\n\n```sql\nSELECT sale_date, MAX(quantity) AS max_qty FROM SalesHistory GROUP BY sale_date HAVING MAX(quantity) >= 10;\n```\nHAVING 會一邊執行，一邊進行彙整，所以會比建立中介資料表之後才執行 WHERE 更有效率，且可讀性比較好。\n\n## 利用IN使用多個 KEY 時，將 KEY 整理在同一個位置\n\n自從 SQL-92 之後，就內建許多列間比較的功能，所以 =、<、> 這類比較或 IN 的參數不僅可以是純量，還能是 LIST。讓我們想想下列這種使用多個 Key 組成 IN 內容情況。\n\n```sql\nSELECT id, state, city FROM Address1 A1 \nWHERE \nstatus IN(\n    SELECT status FROM Address2 A2 WHERE A1.id = A2.id      \n) AND city IN (\n    SELECT city FROM Address2 A2 WHERE A1.id = A2.id      \n)\n```\n\n```sql\nSELECT * FROM Address1 A1 WHERE id || status || city IN(\n    SELECT id || state || city FROM Address1 A2);\n)\n```\n\n如此一來既可將子查詢寫成非關聯式類型，還能將搜尋減少為一次，如果是支援列間比較 DB，還能如下在 IN 的參數設定欄位組合。\n\n```sql\nSELECT * FROM Address1 A1 WHERE (id, status, city) IN(\n    SELECT id , state , city FROM Address1 A2);\n)\n```\n\n相較於合併字串，這個方法有兩個優點。其一是不用擔心連結的類型轉換，另一個需要加工欄位，所以可使用索引值。\n\n## 先連結在彙整\n\n當需要連結使用，盡可能先連結在彙整，才能省去建立中介資料的步驟。之所以能夠省略，全在於集合運算的連結屬於乘法，若具一對一或是一對多的關聯性\n，列數不會在連結之際增加。\n\n## 計畫性地使用視圖\n\n視圖是非常方便的工具，但如果隨便訂了複雜的視圖將使效能下降，尤其定義是圖的查詢含有下列運算時，SQL 的效率將變得更差，執行速度也會出乎意料的下滑。\n\n#### 總結\n\n    1.在 IN 使用子查詢，可以利用EXISTS或改寫連結。\n    2.使用索引值，基本上左邊是空白的。\n    3.SQL 雖然不需要明定排序部分，但有許多運算會偷偷執行排序，需多加留意。\n    4.盡可能減少不需要的中介資料。\n    5.趁早撰寫能減少紀錄筆數的條件。\n\n參考資料: \n\n1. SQL 達人的工作現場攻略筆記\n\n2. https://ithelp.ithome.com.tw/articles/10221971","slug":"sql/202012132016","published":1,"updated":"2023-02-08T09:17:55.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldvglsva0004j8vz84zl2oin","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SQL 的效能一直是 DB 工程師必須面對的主要課程之一，甚至有些人認為是唯一的課題。此文章是改善 SQL 的效能，讓執行速度更快減少更多資源。</p>\n<h2 id=\"使用效率的搜尋\"><a href=\"#使用效率的搜尋\" class=\"headerlink\" title=\"使用效率的搜尋\"></a>使用效率的搜尋</h2><h4 id=\"若子查詢為參數\"><a href=\"#若子查詢為參數\" class=\"headerlink\" title=\"若子查詢為參數\"></a>若子查詢為參數</h4><p>使用 EXISTS 代替 IN，在 IN 述詞很方便，也很好讀，但卻會遇到效能瓶頸的問題，若當 IN 參數 (1,2,3) 這種 List 時繼就不需要改寫，但如果以子查詢為參數就必須要注意，通常 NOT IN 跟 NOT EXISTS 都是回傳相同的結果，但是使用 EXISTS 建立子查詢卻快的很多。</p>\n<p>Class_A</p>\n<table>\n<thead>\n<tr>\n<th>id (識別子)</th>\n<th>name (姓名)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>郁</td>\n</tr>\n<tr>\n<td>2</td>\n<td>瑋</td>\n</tr>\n<tr>\n<td>3</td>\n<td>銘</td>\n</tr>\n</tbody></table>\n<p>Class_B</p>\n<table>\n<thead>\n<tr>\n<th>id (識別子)</th>\n<th>name (姓名)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>郁</td>\n</tr>\n<tr>\n<td>2</td>\n<td>瑋</td>\n</tr>\n<tr>\n<td>4</td>\n<td>靚</td>\n</tr>\n</tbody></table>\n<p>試著從 Class_A 表找出 Class_B 資料表也有的學生。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 較慢</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Class_A <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> <span class=\"keyword\">IN</span> ( <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> Class_B);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 較快</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Class_A A <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> ( <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> Class_B B <span class=\"keyword\">WHERE</span> A.id = B.id );</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>id (識別子)</th>\n<th>name (姓名)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>郁</td>\n</tr>\n<tr>\n<td>2</td>\n<td>瑋</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 為什麼 EXISTS 會比較快?大致上有兩個理由。</span></span><br><span class=\"line\">1. 如果連結key帶有索引值，就可能直接按照索引值，不需觀察 Class_B 的資料表。</span><br><span class=\"line\">2. EXISTS 只要找到一筆符合的列，就會立刻停止搜尋，不會是 IN 得全面搜尋一遍。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"子查詢為參數時，使用連結代替-IN\"><a href=\"#子查詢為參數時，使用連結代替-IN\" class=\"headerlink\" title=\"子查詢為參數時，使用連結代替 IN\"></a>子查詢為參數時，使用連結代替 IN</h4><p>要改善 IN 的效能，除了使用 EXISTS 改寫，也可以利用連結方式去實現。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> A.id,A.name <span class=\"keyword\">FROM</span> Class_A A <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Class_B B <span class=\"keyword\">ON</span> A.id = B.id;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"避開排序\"><a href=\"#避開排序\" class=\"headerlink\" title=\"避開排序\"></a>避開排序</h2><p>SQL 與程式語言不同，使用者無法直接命令 DBMS 指定排序運算，不過這不代表 DBMS 不執行排序，更精準的說是 DBMS 非常頻繁的偷偷執行排序，也導致使用者不用去理會哪中運算正在執行排序。</p>\n<p>會執行排序如下:</p>\n<ol>\n<li>GROUP BY</li>\n<li>ORDER BY</li>\n<li>彙總函數 (SUM、COUNT、AVG、MAX、MIN)</li>\n<li>DISTINCT</li>\n<li>UNION、INTERSECT、EXCEPT</li>\n<li>視窗函數 (RANK ROW_NUMBER)</li>\n</ol>\n<h4 id=\"善用集合運算的-ALL-選項\"><a href=\"#善用集合運算的-ALL-選項\" class=\"headerlink\" title=\"善用集合運算的 ALL 選項\"></a>善用集合運算的 ALL 選項</h4><p>SQL 具有 UNION、INTERSECT、EXCEPT 三種集合運算子，如果直接使用一定會為了排除重複資料而執行排序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Class_A</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Class_B;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>id (識別子)</th>\n<th>name (姓名)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>郁</td>\n</tr>\n<tr>\n<td>2</td>\n<td>瑋</td>\n</tr>\n<tr>\n<td>3</td>\n<td>銘</td>\n</tr>\n<tr>\n<td>4</td>\n<td>靚</td>\n</tr>\n</tbody></table>\n<p>如果不用在乎重複資料或事先知道不會有重複資料，可以利用 UNION ALL 代替，避免執行排序。</p>\n<h4 id=\"以-EXISTS-代替-DISTINCT\"><a href=\"#以-EXISTS-代替-DISTINCT\" class=\"headerlink\" title=\"以 EXISTS 代替 DISTINCT\"></a>以 EXISTS 代替 DISTINCT</h4><p>DISTINCT 也會為了排除重複資料而執行排序。若是為了統整兩張表連結結果而使用 DISTINCT 的情況，也可以使用 EXISTS 代替，也能避免執行排序。</p>\n<p>Items</p>\n<table>\n<thead>\n<tr>\n<th>item_no</th>\n<th>item</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10</td>\n<td>SD 記憶卡</td>\n</tr>\n<tr>\n<td>20</td>\n<td>CD-R</td>\n</tr>\n<tr>\n<td>30</td>\n<td>USB 隨身碟</td>\n</tr>\n<tr>\n<td>40</td>\n<td>DVD</td>\n</tr>\n</tbody></table>\n<p>SalesHistory</p>\n<table>\n<thead>\n<tr>\n<th>sale_date</th>\n<th>item_no</th>\n<th>quantity</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-10-01</td>\n<td>10</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2020-10-01</td>\n<td>20</td>\n<td>10</td>\n</tr>\n<tr>\n<td>2020-10-01</td>\n<td>30</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2020-10-03</td>\n<td>10</td>\n<td>32</td>\n</tr>\n<tr>\n<td>2020-10-03</td>\n<td>30</td>\n<td>12</td>\n</tr>\n<tr>\n<td>2020-10-04</td>\n<td>20</td>\n<td>22</td>\n</tr>\n<tr>\n<td>2020-10-04</td>\n<td>30</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>根據上方商品主資料表選出業績表的商品，簡單說就是找出有業績的商品，此時書中說使用 IN 雖然不錯。但前面提到用連結會更好。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> I.item_no <span class=\"keyword\">FROM</span> Items I <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> SalesHistory SH <span class=\"keyword\">ON</span> I.item_no = SH.item_no;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>item_no</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10</td>\n</tr>\n<tr>\n<td>10</td>\n</tr>\n<tr>\n<td>20</td>\n</tr>\n<tr>\n<td>20</td>\n</tr>\n<tr>\n<td>30</td>\n</tr>\n<tr>\n<td>30</td>\n</tr>\n<tr>\n<td>30</td>\n</tr>\n</tbody></table>\n<p>由於是一對多連結，就會出現重複資料，若要將重複資料排除勢必使用 DISTINCT 那這樣就會執行到排序，所以書中說到最佳解答是使用 EXISTS，如此一來就不會執行排序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> item_no <span class=\"keyword\">FROM</span> Items I <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SalesHistory SH <span class=\"keyword\">WHERE</span> I.item_no = SH.item_no</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"於極值函數-MAX-MIN-使用索引值\"><a href=\"#於極值函數-MAX-MIN-使用索引值\" class=\"headerlink\" title=\"於極值函數 MAX / MIN 使用索引值\"></a>於極值函數 MAX / MIN 使用索引值</h2><p>SQL內建 MAX 跟 MIN 函數，使用時都會進行排序，但如果參數欄位已有索引值，就只需要掃描到該索引值，不需要搜尋整張表。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 這段會需要搜尋整張表格</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(item) <span class=\"keyword\">FROM</span> Items</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 這段可以使用到索引值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(item_no) <span class=\"keyword\">FROM</span> Items</span><br></pre></td></tr></table></figure>\n\n<p>由於 item_no 主鍵的索引值，所以效果更好，即時是複合索引值，只要有首欄位就能使用。雖然這種做法無法真的不排序，但至少可讓前半段搜尋變快，也能提高效率。</p>\n<h2 id=\"寫在-WHERE-的條件不寫在-HAVING-上\"><a href=\"#寫在-WHERE-的條件不寫在-HAVING-上\" class=\"headerlink\" title=\"寫在 WHERE 的條件不寫在 HAVING 上\"></a>寫在 WHERE 的條件不寫在 HAVING 上</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> sale_date, <span class=\"keyword\">SUM</span>(quantity)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SalesHistory </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sale_date <span class=\"keyword\">HAVING</span> sale_date = <span class=\"string\">&#x27;2007-10-01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> sale_date, <span class=\"keyword\">SUM</span>(quantity)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SalesHistory <span class=\"keyword\">WHERE</span> sale_date = <span class=\"string\">&#x27;2007-10-01&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sale_date;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>sale_date</th>\n<th>sum (quantity)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2007-10-01</td>\n<td>17</td>\n</tr>\n</tbody></table>\n<p>從效能來看一定是後者，原因是第一個使用 GROUP BY 之後彙整進行排序與運算，所以減少列數，才能減輕排序時負擔。第二個就是 WHERE 條件可使用索引值。某種意義上，sale_date 應該是基數非常高的欄位，所以只要有索引值，應該就能讓列數有效率減少。</p>\n<h4 id=\"GROUP-BY-以及-ORDER-BY-使用索引值\"><a href=\"#GROUP-BY-以及-ORDER-BY-使用索引值\" class=\"headerlink\" title=\"GROUP BY 以及 ORDER BY 使用索引值\"></a>GROUP BY 以及 ORDER BY 使用索引值</h4><p>這兩種方式雖然會執行排序，但只要在欄位上加上索引值，就能讓搜尋速度變快，尤其是 UNIQUE 索引值欄位，有些系統的規格更是能跳過排序。</p>\n<h2 id=\"索引值真的派得上用場嗎\"><a href=\"#索引值真的派得上用場嗎\" class=\"headerlink\" title=\"索引值真的派得上用場嗎?\"></a>索引值真的派得上用場嗎?</h2><p>一般來說資料表有一定規模後，通常就會有索引值。把索引值想像成 C 語言的指標陣列，意思就是比起搜尋規模較大的物件，搜尋較小的指標會更有效率。</p>\n<ol>\n<li><p>不是索引越多越好，索引可以加快查詢速度，但注意它是以空間換取時間。</p>\n</li>\n<li><p>懂的使用 Explain 來分析你的 SQL 索引性能解析，<a href=\"https://segmentfault.com/a/1190000008131735\">https://segmentfault.com/a/1190000008131735</a> 。</p>\n</li>\n<li><p>索引不是建了就會使用。例如: SELECT * FROM user WHERE sex = 0 ( 0 代表女生 )，答案是不一定，如果大部份的值都是女生，那 MYSQL 會用全掃，如果大部份值為男生，那 MYSQL 會用索引。</p>\n</li>\n<li><p>連合索引的欄位順序，通常是由最左邊的欄位的才能使用。</p>\n</li>\n<li><p>儘可能使用索引的排序。</p>\n</li>\n<li><p>有時太多索引，反而會讓優化器混亂。</p>\n</li>\n</ol>\n<h4 id=\"加工索引值欄位\"><a href=\"#加工索引值欄位\" class=\"headerlink\" title=\"加工索引值欄位\"></a>加工索引值欄位</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--  NO</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 * <span class=\"number\">1.1</span> &gt; <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--  OK</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 &gt; <span class=\"number\">100</span> / <span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure>\n\n<p>若於搜尋條件右側使用公式，就會用到索引值。因此可以改成下列方式。同樣的在左側使用函數就無法使用到索引值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> <span class=\"keyword\">SUBSTR</span>(col_1, <span class=\"number\">1</span>, <span class=\"number\">1</span>) = <span class=\"string\">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果非要左邊進行運算，書中說到可以用函數索引，但這種方式很麻煩也不太建議。</p>\n<ul>\n<li>使用索引值時候，欄位最好是乾淨的。</li>\n</ul>\n<h4 id=\"索引值欄位有NULL\"><a href=\"#索引值欄位有NULL\" class=\"headerlink\" title=\"索引值欄位有NULL\"></a>索引值欄位有NULL</h4><p>索引值有 NULL 是很難處理的，而且不同規格有不同處理的方式，這也是因為受到使用者使用 IS NULL 或是 IS NOT NULL，就無法使用索引值，或是 NULL 偏多的欄位無法使用索引的限制導致。此外該如何與 IS NOT NULL 同等條件使用索引值，可以使用下列方式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- IS NOT NULL 替代方案</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 &gt; <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用否定型的情況\"><a href=\"#使用否定型的情況\" class=\"headerlink\" title=\"使用否定型的情況\"></a>使用否定型的情況</h4><p>列出否定型不會使用索引值</p>\n<ul>\n<li>&lt;&gt;</li>\n<li>!=</li>\n<li>NOT IN</li>\n</ul>\n<p>因此下列程式也無法取使用索引值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 &lt;&gt; <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-OR-的情況\"><a href=\"#使用-OR-的情況\" class=\"headerlink\" title=\"使用 OR 的情況\"></a>使用 OR 的情況</h4><p>假設 col_1 與 col_2 各有索引值情況，或者 col_1, col_2 有複合索引，使 OR 撰寫連結條件，就無法使用索引值，而且就算可以使用，搜尋效率也會比 AND 差。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 &gt; <span class=\"number\">1</span> <span class=\"keyword\">OR</span> col_2 = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再複合索引下，欄位順序是錯誤的\"><a href=\"#再複合索引下，欄位順序是錯誤的\" class=\"headerlink\" title=\"再複合索引下，欄位順序是錯誤的\"></a>再複合索引下，欄位順序是錯誤的</h4><p>假設以 col_1, col_2, col_3 這個順序下建立索引值，建立索引值欄位順序就相對重要。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 ＝ <span class=\"number\">10</span> <span class=\"keyword\">AND</span> col_2 = <span class=\"number\">100</span> <span class=\"keyword\">AND</span> col_3 = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 ＝ <span class=\"number\">10</span> <span class=\"keyword\">AND</span> col_2 = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 ＝ <span class=\"number\">10</span> <span class=\"keyword\">AND</span> col_3 = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_2 ＝ <span class=\"number\">100</span> <span class=\"keyword\">AND</span> col_3 = <span class=\"number\">500</span>;</span><br></pre></td></tr></table></figure>\n\n<p>第一個欄位一定寫在開頭，順序不能錯亂。某些 DB 雖然可能順序錯誤情況也可以使用索引值，但是效能還是比順序正確時來得低。</p>\n<h4 id=\"使用後方一致或中間一致的LIKE\"><a href=\"#使用後方一致或中間一致的LIKE\" class=\"headerlink\" title=\"使用後方一致或中間一致的LIKE\"></a>使用後方一致或中間一致的LIKE</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%10&#x27;</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%10%&#x27;</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;10%&#x27;</span> ;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"會進行預設型態轉換\"><a href=\"#會進行預設型態轉換\" class=\"headerlink\" title=\"會進行預設型態轉換\"></a>會進行預設型態轉換</h4><p>下列是對字串類型的 col_1 設定條件的情況。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 = <span class=\"number\">10</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 = <span class=\"string\">&#x27;10&#x27;</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 = <span class=\"keyword\">CAST</span>(<span class=\"number\">10</span>,<span class=\"keyword\">AS</span> <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"減少中介資料表\"><a href=\"#減少中介資料表\" class=\"headerlink\" title=\"減少中介資料表\"></a>減少中介資料表</h2><p>SQL 會將子查詢結果為新的資料表，也能在程式碼裡，像是操作原始資料表一般操作。這種高正交性讓 SQL 程式碼更加靈活，但若是大量使用中介資料也會造成性能下滑，所以盡可能減少中介資料。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> sale_date, <span class=\"keyword\">MAX</span>(quantity) <span class=\"keyword\">AS</span> max_qty <span class=\"keyword\">FROM</span> SalesHistory <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sale_date</span><br><span class=\"line\">) TMP <span class=\"comment\">--多餘的中介資料</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> max_qty &gt;= <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<p>不過，要將彙整的結果設定條件，是不需要建立多餘中介資料，只需要使用下列 HAVING 陳述句。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> sale_date, <span class=\"keyword\">MAX</span>(quantity) <span class=\"keyword\">AS</span> max_qty <span class=\"keyword\">FROM</span> SalesHistory <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sale_date <span class=\"keyword\">HAVING</span> <span class=\"keyword\">MAX</span>(quantity) &gt;= <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>HAVING 會一邊執行，一邊進行彙整，所以會比建立中介資料表之後才執行 WHERE 更有效率，且可讀性比較好。</p>\n<h2 id=\"利用IN使用多個-KEY-時，將-KEY-整理在同一個位置\"><a href=\"#利用IN使用多個-KEY-時，將-KEY-整理在同一個位置\" class=\"headerlink\" title=\"利用IN使用多個 KEY 時，將 KEY 整理在同一個位置\"></a>利用IN使用多個 KEY 時，將 KEY 整理在同一個位置</h2><p>自從 SQL-92 之後，就內建許多列間比較的功能，所以 =、&lt;、&gt; 這類比較或 IN 的參數不僅可以是純量，還能是 LIST。讓我們想想下列這種使用多個 Key 組成 IN 內容情況。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>, state, city <span class=\"keyword\">FROM</span> Address1 A1 </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> </span><br><span class=\"line\"><span class=\"keyword\">status</span> <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"keyword\">status</span> <span class=\"keyword\">FROM</span> Address2 A2 <span class=\"keyword\">WHERE</span> A1.id = A2.id      </span><br><span class=\"line\">) <span class=\"keyword\">AND</span> city <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> city <span class=\"keyword\">FROM</span> Address2 A2 <span class=\"keyword\">WHERE</span> A1.id = A2.id      </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Address1 A1 <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> || <span class=\"keyword\">status</span> || city <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> || state || city <span class=\"keyword\">FROM</span> Address1 A2);</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如此一來既可將子查詢寫成非關聯式類型，還能將搜尋減少為一次，如果是支援列間比較 DB，還能如下在 IN 的參數設定欄位組合。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Address1 A1 <span class=\"keyword\">WHERE</span> (<span class=\"keyword\">id</span>, <span class=\"keyword\">status</span>, city) <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> , state , city <span class=\"keyword\">FROM</span> Address1 A2);</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>相較於合併字串，這個方法有兩個優點。其一是不用擔心連結的類型轉換，另一個需要加工欄位，所以可使用索引值。</p>\n<h2 id=\"先連結在彙整\"><a href=\"#先連結在彙整\" class=\"headerlink\" title=\"先連結在彙整\"></a>先連結在彙整</h2><p>當需要連結使用，盡可能先連結在彙整，才能省去建立中介資料的步驟。之所以能夠省略，全在於集合運算的連結屬於乘法，若具一對一或是一對多的關聯性<br>，列數不會在連結之際增加。</p>\n<h2 id=\"計畫性地使用視圖\"><a href=\"#計畫性地使用視圖\" class=\"headerlink\" title=\"計畫性地使用視圖\"></a>計畫性地使用視圖</h2><p>視圖是非常方便的工具，但如果隨便訂了複雜的視圖將使效能下降，尤其定義是圖的查詢含有下列運算時，SQL 的效率將變得更差，執行速度也會出乎意料的下滑。</p>\n<h4 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h4><pre><code>1.在 IN 使用子查詢，可以利用EXISTS或改寫連結。\n2.使用索引值，基本上左邊是空白的。\n3.SQL 雖然不需要明定排序部分，但有許多運算會偷偷執行排序，需多加留意。\n4.盡可能減少不需要的中介資料。\n5.趁早撰寫能減少紀錄筆數的條件。</code></pre>\n<p>參考資料: </p>\n<ol>\n<li><p>SQL 達人的工作現場攻略筆記</p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10221971\">https://ithelp.ithome.com.tw/articles/10221971</a></p>\n</li>\n</ol>\n","site":{"data":{"next.cofnig":{"override":false,"reminder":false,"cache":{"enable":true},"minify":false,"custom_file_path":{"style":"source/_data/styles.styl"},"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"language_switcher":false,"footer":{"icon":{"name":"fa fa-heart","animated":false,"color":"#ff0000"},"copyright":null,"powered":true,"beian":{"enable":false,"icp":null,"gongan_id":null,"gongan_num":null,"gongan_icon_url":null}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":false,"language":null},"scheme":"Pisces","darkmode":false,"menu":{"home":"/ || fa fa-home","about":"/me || fa fa-user","tags":"/tags/ || fa fa-tags","categories":"/categories/ || fa fa-th","archives":"/archives/ || fa fa-archive"},"menu_icons":{"enable":true},"menu_settings":{"icons":true,"badges":false},"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"avatar":{"url":"/images/1.jpeg","rounded":false,"rotated":false},"site_state":true,"social":{"GitHub":"https://github.com/LueZero || fab fa-github","E-Mail":"a0970937127@gmail.com || fa fa-envelope"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_settings":{"icon":"fa fa-link","title":"Links","layout":"block"},"links":null,"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"chat":{"enable":false,"icon":"fa fa-comment","text":"Chat"},"excerpt_description":true,"scroll_to_more":false,"auto_excerpt":{"enable":true,"length":100},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":false,"item_text_post":true,"item_text_total":false,"symbols":true,"time":true,"total_symbols":false,"total_time":false,"exclude_codeblock":false,"awl":4,"wpm":275,"suffix":"分鐘"},"tag_icon":false,"reward_settings":{"enable":false,"animation":false},"reward":null,"follow_me":null,"related_posts":{"enable":false,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name"},"post_navigation":"left","tagcloud":{"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":false,"show_result":false,"style":null}},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"reading_progress":{"enable":false,"position":"top","color":"#37c6c0","height":"3px"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/yourname","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"disable_baidu_transformation":false,"index_with_subtitle":false,"exturl":false,"google_site_verification":null,"bing_site_verification":null,"yandex_site_verification":null,"baidu_site_verification":null,"baidu_push":false,"math":{"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":false,"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"quicklink":{"enable":false,"home":false,"archive":false,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"disqus":{"enable":false,"shortname":null,"count":true},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"language":null,"visitor":false,"comment_count":true,"recordIP":false,"serverURLs":null},"livere_uid":null,"gitalk":{"enable":false,"github_id":null,"repo":null,"client_id":null,"client_secret":null,"admin_user":null,"distraction_free_mode":true,"language":null},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":null,"google_analytics":{"tracking_id":null,"only_pageview":false},"baidu_analytics":null,"growingio_analytics":null,"cnzz_siteid":null,"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null,"server_url":null,"security":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":false,"total_visitors":true,"total_visitors_icon":"fa fa-user","total_views":true,"total_views_icon":"fa fa-eye","post_views":true,"post_views_icon":"fa fa-eye"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"simple","icons":false,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true}},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":false,"theme":"minimal"},"three":{"enable":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","anime":null,"fontawesome":null,"mathjax":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":null,"jquery":null,"fancybox":null,"fancybox_css":null,"mediumzoom":null,"lazyload":null,"pangu":null,"quicklink":null,"disqusjs_js":null,"disqusjs_css":null,"valine":null,"gitalk_js":null,"gitalk_css":null,"algolia_search":null,"instant_search":null,"mermaid":null,"velocity":null,"velocity_ui":null,"pace":null,"pace_css":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null},"css":"css","js":"js","images":"images","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":false}},"styles":""}},"excerpt":"前言\nSQL 的效能一直是 DB 工程師必須面對的主要課程之一，甚至有些人認為是唯一的課題。此文章是改善 SQL 的效能，讓執行速度更快減少更多資源。\n\n使用效率的搜尋\n若子查詢為參數\n使用 EXISTS 代替 IN，在 IN 述詞很方便，也很好讀，但卻會遇到效能瓶頸的問題，若當 IN 參數 (1,2,3) 這種 List 時繼就不需要改寫，但如果以子查詢為參數就必須要注意，通常 NOT IN 跟 NOT EXISTS 都是回傳相同的結果，但是使用 EXISTS 建立子查詢卻快的很多。\n\nClass_A\n\nid (識別子)name (姓名)1郁2瑋3銘Class_B\n\nid (識別子)name","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SQL 的效能一直是 DB 工程師必須面對的主要課程之一，甚至有些人認為是唯一的課題。此文章是改善 SQL 的效能，讓執行速度更快減少更多資源。</p>\n<h2 id=\"使用效率的搜尋\"><a href=\"#使用效率的搜尋\" class=\"headerlink\" title=\"使用效率的搜尋\"></a>使用效率的搜尋</h2><h4 id=\"若子查詢為參數\"><a href=\"#若子查詢為參數\" class=\"headerlink\" title=\"若子查詢為參數\"></a>若子查詢為參數</h4><p>使用 EXISTS 代替 IN，在 IN 述詞很方便，也很好讀，但卻會遇到效能瓶頸的問題，若當 IN 參數 (1,2,3) 這種 List 時繼就不需要改寫，但如果以子查詢為參數就必須要注意，通常 NOT IN 跟 NOT EXISTS 都是回傳相同的結果，但是使用 EXISTS 建立子查詢卻快的很多。</p>\n<p>Class_A</p>\n<table>\n<thead>\n<tr>\n<th>id (識別子)</th>\n<th>name (姓名)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>郁</td>\n</tr>\n<tr>\n<td>2</td>\n<td>瑋</td>\n</tr>\n<tr>\n<td>3</td>\n<td>銘</td>\n</tr>\n</tbody></table>\n<p>Class_B</p>\n<table>\n<thead>\n<tr>\n<th>id (識別子)</th>\n<th>name (姓名)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>郁</td>\n</tr>\n<tr>\n<td>2</td>\n<td>瑋</td>\n</tr>\n<tr>\n<td>4</td>\n<td>靚</td>\n</tr>\n</tbody></table>\n<p>試著從 Class_A 表找出 Class_B 資料表也有的學生。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 較慢</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Class_A <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> <span class=\"keyword\">IN</span> ( <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> Class_B);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 較快</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Class_A A <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span> ( <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> Class_B B <span class=\"keyword\">WHERE</span> A.id = B.id );</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>id (識別子)</th>\n<th>name (姓名)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>郁</td>\n</tr>\n<tr>\n<td>2</td>\n<td>瑋</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 為什麼 EXISTS 會比較快?大致上有兩個理由。</span></span><br><span class=\"line\">1. 如果連結key帶有索引值，就可能直接按照索引值，不需觀察 Class_B 的資料表。</span><br><span class=\"line\">2. EXISTS 只要找到一筆符合的列，就會立刻停止搜尋，不會是 IN 得全面搜尋一遍。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"子查詢為參數時，使用連結代替-IN\"><a href=\"#子查詢為參數時，使用連結代替-IN\" class=\"headerlink\" title=\"子查詢為參數時，使用連結代替 IN\"></a>子查詢為參數時，使用連結代替 IN</h4><p>要改善 IN 的效能，除了使用 EXISTS 改寫，也可以利用連結方式去實現。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> A.id,A.name <span class=\"keyword\">FROM</span> Class_A A <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> Class_B B <span class=\"keyword\">ON</span> A.id = B.id;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"避開排序\"><a href=\"#避開排序\" class=\"headerlink\" title=\"避開排序\"></a>避開排序</h2><p>SQL 與程式語言不同，使用者無法直接命令 DBMS 指定排序運算，不過這不代表 DBMS 不執行排序，更精準的說是 DBMS 非常頻繁的偷偷執行排序，也導致使用者不用去理會哪中運算正在執行排序。</p>\n<p>會執行排序如下:</p>\n<ol>\n<li>GROUP BY</li>\n<li>ORDER BY</li>\n<li>彙總函數 (SUM、COUNT、AVG、MAX、MIN)</li>\n<li>DISTINCT</li>\n<li>UNION、INTERSECT、EXCEPT</li>\n<li>視窗函數 (RANK ROW_NUMBER)</li>\n</ol>\n<h4 id=\"善用集合運算的-ALL-選項\"><a href=\"#善用集合運算的-ALL-選項\" class=\"headerlink\" title=\"善用集合運算的 ALL 選項\"></a>善用集合運算的 ALL 選項</h4><p>SQL 具有 UNION、INTERSECT、EXCEPT 三種集合運算子，如果直接使用一定會為了排除重複資料而執行排序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Class_A</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Class_B;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>id (識別子)</th>\n<th>name (姓名)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>郁</td>\n</tr>\n<tr>\n<td>2</td>\n<td>瑋</td>\n</tr>\n<tr>\n<td>3</td>\n<td>銘</td>\n</tr>\n<tr>\n<td>4</td>\n<td>靚</td>\n</tr>\n</tbody></table>\n<p>如果不用在乎重複資料或事先知道不會有重複資料，可以利用 UNION ALL 代替，避免執行排序。</p>\n<h4 id=\"以-EXISTS-代替-DISTINCT\"><a href=\"#以-EXISTS-代替-DISTINCT\" class=\"headerlink\" title=\"以 EXISTS 代替 DISTINCT\"></a>以 EXISTS 代替 DISTINCT</h4><p>DISTINCT 也會為了排除重複資料而執行排序。若是為了統整兩張表連結結果而使用 DISTINCT 的情況，也可以使用 EXISTS 代替，也能避免執行排序。</p>\n<p>Items</p>\n<table>\n<thead>\n<tr>\n<th>item_no</th>\n<th>item</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10</td>\n<td>SD 記憶卡</td>\n</tr>\n<tr>\n<td>20</td>\n<td>CD-R</td>\n</tr>\n<tr>\n<td>30</td>\n<td>USB 隨身碟</td>\n</tr>\n<tr>\n<td>40</td>\n<td>DVD</td>\n</tr>\n</tbody></table>\n<p>SalesHistory</p>\n<table>\n<thead>\n<tr>\n<th>sale_date</th>\n<th>item_no</th>\n<th>quantity</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2020-10-01</td>\n<td>10</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2020-10-01</td>\n<td>20</td>\n<td>10</td>\n</tr>\n<tr>\n<td>2020-10-01</td>\n<td>30</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2020-10-03</td>\n<td>10</td>\n<td>32</td>\n</tr>\n<tr>\n<td>2020-10-03</td>\n<td>30</td>\n<td>12</td>\n</tr>\n<tr>\n<td>2020-10-04</td>\n<td>20</td>\n<td>22</td>\n</tr>\n<tr>\n<td>2020-10-04</td>\n<td>30</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>根據上方商品主資料表選出業績表的商品，簡單說就是找出有業績的商品，此時書中說使用 IN 雖然不錯。但前面提到用連結會更好。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> I.item_no <span class=\"keyword\">FROM</span> Items I <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> SalesHistory SH <span class=\"keyword\">ON</span> I.item_no = SH.item_no;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>item_no</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10</td>\n</tr>\n<tr>\n<td>10</td>\n</tr>\n<tr>\n<td>20</td>\n</tr>\n<tr>\n<td>20</td>\n</tr>\n<tr>\n<td>30</td>\n</tr>\n<tr>\n<td>30</td>\n</tr>\n<tr>\n<td>30</td>\n</tr>\n</tbody></table>\n<p>由於是一對多連結，就會出現重複資料，若要將重複資料排除勢必使用 DISTINCT 那這樣就會執行到排序，所以書中說到最佳解答是使用 EXISTS，如此一來就不會執行排序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> item_no <span class=\"keyword\">FROM</span> Items I <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SalesHistory SH <span class=\"keyword\">WHERE</span> I.item_no = SH.item_no</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"於極值函數-MAX-MIN-使用索引值\"><a href=\"#於極值函數-MAX-MIN-使用索引值\" class=\"headerlink\" title=\"於極值函數 MAX / MIN 使用索引值\"></a>於極值函數 MAX / MIN 使用索引值</h2><p>SQL內建 MAX 跟 MIN 函數，使用時都會進行排序，但如果參數欄位已有索引值，就只需要掃描到該索引值，不需要搜尋整張表。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 這段會需要搜尋整張表格</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(item) <span class=\"keyword\">FROM</span> Items</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 這段可以使用到索引值</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">MAX</span>(item_no) <span class=\"keyword\">FROM</span> Items</span><br></pre></td></tr></table></figure>\n\n<p>由於 item_no 主鍵的索引值，所以效果更好，即時是複合索引值，只要有首欄位就能使用。雖然這種做法無法真的不排序，但至少可讓前半段搜尋變快，也能提高效率。</p>\n<h2 id=\"寫在-WHERE-的條件不寫在-HAVING-上\"><a href=\"#寫在-WHERE-的條件不寫在-HAVING-上\" class=\"headerlink\" title=\"寫在 WHERE 的條件不寫在 HAVING 上\"></a>寫在 WHERE 的條件不寫在 HAVING 上</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> sale_date, <span class=\"keyword\">SUM</span>(quantity)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SalesHistory </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sale_date <span class=\"keyword\">HAVING</span> sale_date = <span class=\"string\">&#x27;2007-10-01&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> sale_date, <span class=\"keyword\">SUM</span>(quantity)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> SalesHistory <span class=\"keyword\">WHERE</span> sale_date = <span class=\"string\">&#x27;2007-10-01&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sale_date;</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>sale_date</th>\n<th>sum (quantity)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2007-10-01</td>\n<td>17</td>\n</tr>\n</tbody></table>\n<p>從效能來看一定是後者，原因是第一個使用 GROUP BY 之後彙整進行排序與運算，所以減少列數，才能減輕排序時負擔。第二個就是 WHERE 條件可使用索引值。某種意義上，sale_date 應該是基數非常高的欄位，所以只要有索引值，應該就能讓列數有效率減少。</p>\n<h4 id=\"GROUP-BY-以及-ORDER-BY-使用索引值\"><a href=\"#GROUP-BY-以及-ORDER-BY-使用索引值\" class=\"headerlink\" title=\"GROUP BY 以及 ORDER BY 使用索引值\"></a>GROUP BY 以及 ORDER BY 使用索引值</h4><p>這兩種方式雖然會執行排序，但只要在欄位上加上索引值，就能讓搜尋速度變快，尤其是 UNIQUE 索引值欄位，有些系統的規格更是能跳過排序。</p>\n<h2 id=\"索引值真的派得上用場嗎\"><a href=\"#索引值真的派得上用場嗎\" class=\"headerlink\" title=\"索引值真的派得上用場嗎?\"></a>索引值真的派得上用場嗎?</h2><p>一般來說資料表有一定規模後，通常就會有索引值。把索引值想像成 C 語言的指標陣列，意思就是比起搜尋規模較大的物件，搜尋較小的指標會更有效率。</p>\n<ol>\n<li><p>不是索引越多越好，索引可以加快查詢速度，但注意它是以空間換取時間。</p>\n</li>\n<li><p>懂的使用 Explain 來分析你的 SQL 索引性能解析，<a href=\"https://segmentfault.com/a/1190000008131735\">https://segmentfault.com/a/1190000008131735</a> 。</p>\n</li>\n<li><p>索引不是建了就會使用。例如: SELECT * FROM user WHERE sex = 0 ( 0 代表女生 )，答案是不一定，如果大部份的值都是女生，那 MYSQL 會用全掃，如果大部份值為男生，那 MYSQL 會用索引。</p>\n</li>\n<li><p>連合索引的欄位順序，通常是由最左邊的欄位的才能使用。</p>\n</li>\n<li><p>儘可能使用索引的排序。</p>\n</li>\n<li><p>有時太多索引，反而會讓優化器混亂。</p>\n</li>\n</ol>\n<h4 id=\"加工索引值欄位\"><a href=\"#加工索引值欄位\" class=\"headerlink\" title=\"加工索引值欄位\"></a>加工索引值欄位</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--  NO</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 * <span class=\"number\">1.1</span> &gt; <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--  OK</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 &gt; <span class=\"number\">100</span> / <span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure>\n\n<p>若於搜尋條件右側使用公式，就會用到索引值。因此可以改成下列方式。同樣的在左側使用函數就無法使用到索引值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> <span class=\"keyword\">SUBSTR</span>(col_1, <span class=\"number\">1</span>, <span class=\"number\">1</span>) = <span class=\"string\">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果非要左邊進行運算，書中說到可以用函數索引，但這種方式很麻煩也不太建議。</p>\n<ul>\n<li>使用索引值時候，欄位最好是乾淨的。</li>\n</ul>\n<h4 id=\"索引值欄位有NULL\"><a href=\"#索引值欄位有NULL\" class=\"headerlink\" title=\"索引值欄位有NULL\"></a>索引值欄位有NULL</h4><p>索引值有 NULL 是很難處理的，而且不同規格有不同處理的方式，這也是因為受到使用者使用 IS NULL 或是 IS NOT NULL，就無法使用索引值，或是 NULL 偏多的欄位無法使用索引的限制導致。此外該如何與 IS NOT NULL 同等條件使用索引值，可以使用下列方式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- IS NOT NULL 替代方案</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 &gt; <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用否定型的情況\"><a href=\"#使用否定型的情況\" class=\"headerlink\" title=\"使用否定型的情況\"></a>使用否定型的情況</h4><p>列出否定型不會使用索引值</p>\n<ul>\n<li>&lt;&gt;</li>\n<li>!=</li>\n<li>NOT IN</li>\n</ul>\n<p>因此下列程式也無法取使用索引值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 &lt;&gt; <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-OR-的情況\"><a href=\"#使用-OR-的情況\" class=\"headerlink\" title=\"使用 OR 的情況\"></a>使用 OR 的情況</h4><p>假設 col_1 與 col_2 各有索引值情況，或者 col_1, col_2 有複合索引，使 OR 撰寫連結條件，就無法使用索引值，而且就算可以使用，搜尋效率也會比 AND 差。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 &gt; <span class=\"number\">1</span> <span class=\"keyword\">OR</span> col_2 = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再複合索引下，欄位順序是錯誤的\"><a href=\"#再複合索引下，欄位順序是錯誤的\" class=\"headerlink\" title=\"再複合索引下，欄位順序是錯誤的\"></a>再複合索引下，欄位順序是錯誤的</h4><p>假設以 col_1, col_2, col_3 這個順序下建立索引值，建立索引值欄位順序就相對重要。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 ＝ <span class=\"number\">10</span> <span class=\"keyword\">AND</span> col_2 = <span class=\"number\">100</span> <span class=\"keyword\">AND</span> col_3 = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 ＝ <span class=\"number\">10</span> <span class=\"keyword\">AND</span> col_2 = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 ＝ <span class=\"number\">10</span> <span class=\"keyword\">AND</span> col_3 = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_2 ＝ <span class=\"number\">100</span> <span class=\"keyword\">AND</span> col_3 = <span class=\"number\">500</span>;</span><br></pre></td></tr></table></figure>\n\n<p>第一個欄位一定寫在開頭，順序不能錯亂。某些 DB 雖然可能順序錯誤情況也可以使用索引值，但是效能還是比順序正確時來得低。</p>\n<h4 id=\"使用後方一致或中間一致的LIKE\"><a href=\"#使用後方一致或中間一致的LIKE\" class=\"headerlink\" title=\"使用後方一致或中間一致的LIKE\"></a>使用後方一致或中間一致的LIKE</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%10&#x27;</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%10%&#x27;</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;10%&#x27;</span> ;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"會進行預設型態轉換\"><a href=\"#會進行預設型態轉換\" class=\"headerlink\" title=\"會進行預設型態轉換\"></a>會進行預設型態轉換</h4><p>下列是對字串類型的 col_1 設定條件的情況。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- X </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 = <span class=\"number\">10</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 = <span class=\"string\">&#x27;10&#x27;</span> ;</span><br><span class=\"line\"><span class=\"comment\">-- O </span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> SomeTable <span class=\"keyword\">WHERE</span> col_1 = <span class=\"keyword\">CAST</span>(<span class=\"number\">10</span>,<span class=\"keyword\">AS</span> <span class=\"built_in\">CHAR</span>(<span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"減少中介資料表\"><a href=\"#減少中介資料表\" class=\"headerlink\" title=\"減少中介資料表\"></a>減少中介資料表</h2><p>SQL 會將子查詢結果為新的資料表，也能在程式碼裡，像是操作原始資料表一般操作。這種高正交性讓 SQL 程式碼更加靈活，但若是大量使用中介資料也會造成性能下滑，所以盡可能減少中介資料。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> sale_date, <span class=\"keyword\">MAX</span>(quantity) <span class=\"keyword\">AS</span> max_qty <span class=\"keyword\">FROM</span> SalesHistory <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sale_date</span><br><span class=\"line\">) TMP <span class=\"comment\">--多餘的中介資料</span></span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> max_qty &gt;= <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<p>不過，要將彙整的結果設定條件，是不需要建立多餘中介資料，只需要使用下列 HAVING 陳述句。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> sale_date, <span class=\"keyword\">MAX</span>(quantity) <span class=\"keyword\">AS</span> max_qty <span class=\"keyword\">FROM</span> SalesHistory <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> sale_date <span class=\"keyword\">HAVING</span> <span class=\"keyword\">MAX</span>(quantity) &gt;= <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>HAVING 會一邊執行，一邊進行彙整，所以會比建立中介資料表之後才執行 WHERE 更有效率，且可讀性比較好。</p>\n<h2 id=\"利用IN使用多個-KEY-時，將-KEY-整理在同一個位置\"><a href=\"#利用IN使用多個-KEY-時，將-KEY-整理在同一個位置\" class=\"headerlink\" title=\"利用IN使用多個 KEY 時，將 KEY 整理在同一個位置\"></a>利用IN使用多個 KEY 時，將 KEY 整理在同一個位置</h2><p>自從 SQL-92 之後，就內建許多列間比較的功能，所以 =、&lt;、&gt; 這類比較或 IN 的參數不僅可以是純量，還能是 LIST。讓我們想想下列這種使用多個 Key 組成 IN 內容情況。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>, state, city <span class=\"keyword\">FROM</span> Address1 A1 </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> </span><br><span class=\"line\"><span class=\"keyword\">status</span> <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"keyword\">status</span> <span class=\"keyword\">FROM</span> Address2 A2 <span class=\"keyword\">WHERE</span> A1.id = A2.id      </span><br><span class=\"line\">) <span class=\"keyword\">AND</span> city <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> city <span class=\"keyword\">FROM</span> Address2 A2 <span class=\"keyword\">WHERE</span> A1.id = A2.id      </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Address1 A1 <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> || <span class=\"keyword\">status</span> || city <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> || state || city <span class=\"keyword\">FROM</span> Address1 A2);</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如此一來既可將子查詢寫成非關聯式類型，還能將搜尋減少為一次，如果是支援列間比較 DB，還能如下在 IN 的參數設定欄位組合。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Address1 A1 <span class=\"keyword\">WHERE</span> (<span class=\"keyword\">id</span>, <span class=\"keyword\">status</span>, city) <span class=\"keyword\">IN</span>(</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> , state , city <span class=\"keyword\">FROM</span> Address1 A2);</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>相較於合併字串，這個方法有兩個優點。其一是不用擔心連結的類型轉換，另一個需要加工欄位，所以可使用索引值。</p>\n<h2 id=\"先連結在彙整\"><a href=\"#先連結在彙整\" class=\"headerlink\" title=\"先連結在彙整\"></a>先連結在彙整</h2><p>當需要連結使用，盡可能先連結在彙整，才能省去建立中介資料的步驟。之所以能夠省略，全在於集合運算的連結屬於乘法，若具一對一或是一對多的關聯性<br>，列數不會在連結之際增加。</p>\n<h2 id=\"計畫性地使用視圖\"><a href=\"#計畫性地使用視圖\" class=\"headerlink\" title=\"計畫性地使用視圖\"></a>計畫性地使用視圖</h2><p>視圖是非常方便的工具，但如果隨便訂了複雜的視圖將使效能下降，尤其定義是圖的查詢含有下列運算時，SQL 的效率將變得更差，執行速度也會出乎意料的下滑。</p>\n<h4 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h4><pre><code>1.在 IN 使用子查詢，可以利用EXISTS或改寫連結。\n2.使用索引值，基本上左邊是空白的。\n3.SQL 雖然不需要明定排序部分，但有許多運算會偷偷執行排序，需多加留意。\n4.盡可能減少不需要的中介資料。\n5.趁早撰寫能減少紀錄筆數的條件。</code></pre>\n<p>參考資料: </p>\n<ol>\n<li><p>SQL 達人的工作現場攻略筆記</p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10221971\">https://ithelp.ithome.com.tw/articles/10221971</a></p>\n</li>\n</ol>\n"},{"title":"SQL 達人的工作現場攻略筆記 - CH-18 GROUP BY 與 PARTITION BY","date":"2021-01-17T13:00:00.000Z","type":"tags","_content":"\n#### 大家了解兩者的差異嗎?\n\n- group by: 對檢索結果的保留行進行單純分組，返回聚合之後的組的數據統計值的記錄。劃分為多組，每組返回一行。\n\n- partition by: 返回分組裡的每一條數據，在應用關聯的視窗函數前確定行集的分區和排序，然後，視窗函數將計算每一行的值。\n\nSQL 篩選各種資料時，最基本操作就是某種準備替資料分組。其實除了使用 SQL 之外，日常生活中整理資料、查詢資料時，替資料建群組。\n\n而在 SQL 中具有建立群組功能就是 GROUP BY 跟 PARTITION BY。這兩種方式都能利用資料表指定的 KEY 來分割資料，而兩者不同地方在於 GROUP BY 會再分割後，將資料彙整為一列，而 PARTITION BY 是將每一欄位取出整理。\n\n透過下列團隊成員資料表說明兩者差異。\n\nTeams\n\n| member | team | age |\n| ------ | ---- | --- |\n| 郁文   | A    | 28  |\n| 瑋乃   | A    | 19  |\n| 銘仁   | A    | 23  |\n| 靚儀   | B    | 40  |\n| 勝朋   | B    | 29  |\n| 美美   | C    | 30  |\n| 建國   | D    | 28  |\n| 崇恩   | D    | 28  |\n| 連雅   | D    | 24  |\n| 光城   | D    | 22  |\n\n若以 GROUP BY 與 PARTITION BY 處理這張資料表，可寫出取得團隊資訊的查詢。不管使用哪個陳述句，Teams 資料表都會先分割部分集合，再以SUM函數彙整或 RANK 排出順位。\n\n```sql\nSELECT member,team,age,\nRANK() OVER(PARTITION BY team ORDER BY age DESC) rn,\nDENSE_RANK()  OVER(PARTITION BY team ORDER BY age DESC) dense_rn,\nROW_NUMBER()  OVER(PARTITION BY team ORDER BY age DESC) row_num\nFROM Teams\nORDER BY team, rn\n```\n\n結果:\n\n| member | team | age | rn  | dense_rn | row_num |\n| ------ | ---- | --- | --- | -------- | ------- |\n| 郁文   | A    | 28  | 1   | 1        | 1       |\n| 銘仁   | A    | 23  | 2   | 2        | 2       |\n| 瑋乃   | A    | 19  | 3   | 3        | 3       |\n| 靚儀   | B    | 40  | 1   | 1        | 1       |\n| 勝朋   | B    | 29  | 2   | 2        | 2       |\n| 美美   | C    | 30  | 1   | 1        | 1       |\n| 建國   | D    | 28  | 1   | 1        | 1       |\n| 崇恩   | D    | 28  | 1   | 1        | 2       |\n| 連雅   | D    | 24  | 3   | 2        | 3       |\n| 光城   | D    | 22  | 4   | 3        | 4       |\n\n根據書中 286頁圖片，使用圖形代表集合，是為了呈現分割，經過仔細觀察後發現\n```\n每一個都不是空集合\n部分集合總和等於分割前的集合\n隨機從中挑選兩個集合出來，不會有共通得部分。\n```\n由於部分集合本來就是從資料表分割而來，所以不會有空集合，且部分集合的總和當然會是分割之的母體集合，所以不會有成員因為分割而失蹤。此外也不會有同時屬於兩個部分集合的成員。每一位成員必然隸屬一個集合。也就是說 GROUP BY 與 PARTITION BY 可將各成員分割至團隊得函數。\n\n#### 結論\n\nSQL 與 RDB 採用許多集合論以及群的成果，或許內容有點抽象，但也因為抽象內容，所以才廣泛應用。\n\n參考資料: \n\n1. SQL 達人的工作現場攻略筆記","source":"_posts/sql/202101172100.md","raw":"---\ntitle: SQL 達人的工作現場攻略筆記 - CH-18 GROUP BY 與 PARTITION BY\ndate: 2021-01-17 21:00:00\ntype: \"tags\"\ncategories: 資料庫\ntags: 資料庫\n---\n\n#### 大家了解兩者的差異嗎?\n\n- group by: 對檢索結果的保留行進行單純分組，返回聚合之後的組的數據統計值的記錄。劃分為多組，每組返回一行。\n\n- partition by: 返回分組裡的每一條數據，在應用關聯的視窗函數前確定行集的分區和排序，然後，視窗函數將計算每一行的值。\n\nSQL 篩選各種資料時，最基本操作就是某種準備替資料分組。其實除了使用 SQL 之外，日常生活中整理資料、查詢資料時，替資料建群組。\n\n而在 SQL 中具有建立群組功能就是 GROUP BY 跟 PARTITION BY。這兩種方式都能利用資料表指定的 KEY 來分割資料，而兩者不同地方在於 GROUP BY 會再分割後，將資料彙整為一列，而 PARTITION BY 是將每一欄位取出整理。\n\n透過下列團隊成員資料表說明兩者差異。\n\nTeams\n\n| member | team | age |\n| ------ | ---- | --- |\n| 郁文   | A    | 28  |\n| 瑋乃   | A    | 19  |\n| 銘仁   | A    | 23  |\n| 靚儀   | B    | 40  |\n| 勝朋   | B    | 29  |\n| 美美   | C    | 30  |\n| 建國   | D    | 28  |\n| 崇恩   | D    | 28  |\n| 連雅   | D    | 24  |\n| 光城   | D    | 22  |\n\n若以 GROUP BY 與 PARTITION BY 處理這張資料表，可寫出取得團隊資訊的查詢。不管使用哪個陳述句，Teams 資料表都會先分割部分集合，再以SUM函數彙整或 RANK 排出順位。\n\n```sql\nSELECT member,team,age,\nRANK() OVER(PARTITION BY team ORDER BY age DESC) rn,\nDENSE_RANK()  OVER(PARTITION BY team ORDER BY age DESC) dense_rn,\nROW_NUMBER()  OVER(PARTITION BY team ORDER BY age DESC) row_num\nFROM Teams\nORDER BY team, rn\n```\n\n結果:\n\n| member | team | age | rn  | dense_rn | row_num |\n| ------ | ---- | --- | --- | -------- | ------- |\n| 郁文   | A    | 28  | 1   | 1        | 1       |\n| 銘仁   | A    | 23  | 2   | 2        | 2       |\n| 瑋乃   | A    | 19  | 3   | 3        | 3       |\n| 靚儀   | B    | 40  | 1   | 1        | 1       |\n| 勝朋   | B    | 29  | 2   | 2        | 2       |\n| 美美   | C    | 30  | 1   | 1        | 1       |\n| 建國   | D    | 28  | 1   | 1        | 1       |\n| 崇恩   | D    | 28  | 1   | 1        | 2       |\n| 連雅   | D    | 24  | 3   | 2        | 3       |\n| 光城   | D    | 22  | 4   | 3        | 4       |\n\n根據書中 286頁圖片，使用圖形代表集合，是為了呈現分割，經過仔細觀察後發現\n```\n每一個都不是空集合\n部分集合總和等於分割前的集合\n隨機從中挑選兩個集合出來，不會有共通得部分。\n```\n由於部分集合本來就是從資料表分割而來，所以不會有空集合，且部分集合的總和當然會是分割之的母體集合，所以不會有成員因為分割而失蹤。此外也不會有同時屬於兩個部分集合的成員。每一位成員必然隸屬一個集合。也就是說 GROUP BY 與 PARTITION BY 可將各成員分割至團隊得函數。\n\n#### 結論\n\nSQL 與 RDB 採用許多集合論以及群的成果，或許內容有點抽象，但也因為抽象內容，所以才廣泛應用。\n\n參考資料: \n\n1. SQL 達人的工作現場攻略筆記","slug":"sql/202101172100","published":1,"updated":"2023-02-08T09:18:54.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldvglsvc0007j8vzaqtggztg","content":"<h4 id=\"大家了解兩者的差異嗎\"><a href=\"#大家了解兩者的差異嗎\" class=\"headerlink\" title=\"大家了解兩者的差異嗎?\"></a>大家了解兩者的差異嗎?</h4><ul>\n<li><p>group by: 對檢索結果的保留行進行單純分組，返回聚合之後的組的數據統計值的記錄。劃分為多組，每組返回一行。</p>\n</li>\n<li><p>partition by: 返回分組裡的每一條數據，在應用關聯的視窗函數前確定行集的分區和排序，然後，視窗函數將計算每一行的值。</p>\n</li>\n</ul>\n<p>SQL 篩選各種資料時，最基本操作就是某種準備替資料分組。其實除了使用 SQL 之外，日常生活中整理資料、查詢資料時，替資料建群組。</p>\n<p>而在 SQL 中具有建立群組功能就是 GROUP BY 跟 PARTITION BY。這兩種方式都能利用資料表指定的 KEY 來分割資料，而兩者不同地方在於 GROUP BY 會再分割後，將資料彙整為一列，而 PARTITION BY 是將每一欄位取出整理。</p>\n<p>透過下列團隊成員資料表說明兩者差異。</p>\n<p>Teams</p>\n<table>\n<thead>\n<tr>\n<th>member</th>\n<th>team</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>郁文</td>\n<td>A</td>\n<td>28</td>\n</tr>\n<tr>\n<td>瑋乃</td>\n<td>A</td>\n<td>19</td>\n</tr>\n<tr>\n<td>銘仁</td>\n<td>A</td>\n<td>23</td>\n</tr>\n<tr>\n<td>靚儀</td>\n<td>B</td>\n<td>40</td>\n</tr>\n<tr>\n<td>勝朋</td>\n<td>B</td>\n<td>29</td>\n</tr>\n<tr>\n<td>美美</td>\n<td>C</td>\n<td>30</td>\n</tr>\n<tr>\n<td>建國</td>\n<td>D</td>\n<td>28</td>\n</tr>\n<tr>\n<td>崇恩</td>\n<td>D</td>\n<td>28</td>\n</tr>\n<tr>\n<td>連雅</td>\n<td>D</td>\n<td>24</td>\n</tr>\n<tr>\n<td>光城</td>\n<td>D</td>\n<td>22</td>\n</tr>\n</tbody></table>\n<p>若以 GROUP BY 與 PARTITION BY 處理這張資料表，可寫出取得團隊資訊的查詢。不管使用哪個陳述句，Teams 資料表都會先分割部分集合，再以SUM函數彙整或 RANK 排出順位。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">member</span>,team,age,</span><br><span class=\"line\"><span class=\"keyword\">RANK</span>() <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> team <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">DESC</span>) rn,</span><br><span class=\"line\"><span class=\"keyword\">DENSE_RANK</span>()  <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> team <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">DESC</span>) dense_rn,</span><br><span class=\"line\">ROW_NUMBER()  <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> team <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">DESC</span>) row_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Teams</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> team, rn</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>member</th>\n<th>team</th>\n<th>age</th>\n<th>rn</th>\n<th>dense_rn</th>\n<th>row_num</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>郁文</td>\n<td>A</td>\n<td>28</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>銘仁</td>\n<td>A</td>\n<td>23</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>瑋乃</td>\n<td>A</td>\n<td>19</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>靚儀</td>\n<td>B</td>\n<td>40</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>勝朋</td>\n<td>B</td>\n<td>29</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>美美</td>\n<td>C</td>\n<td>30</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>建國</td>\n<td>D</td>\n<td>28</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>崇恩</td>\n<td>D</td>\n<td>28</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>連雅</td>\n<td>D</td>\n<td>24</td>\n<td>3</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>光城</td>\n<td>D</td>\n<td>22</td>\n<td>4</td>\n<td>3</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<p>根據書中 286頁圖片，使用圖形代表集合，是為了呈現分割，經過仔細觀察後發現</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每一個都不是空集合</span><br><span class=\"line\">部分集合總和等於分割前的集合</span><br><span class=\"line\">隨機從中挑選兩個集合出來，不會有共通得部分。</span><br></pre></td></tr></table></figure>\n<p>由於部分集合本來就是從資料表分割而來，所以不會有空集合，且部分集合的總和當然會是分割之的母體集合，所以不會有成員因為分割而失蹤。此外也不會有同時屬於兩個部分集合的成員。每一位成員必然隸屬一個集合。也就是說 GROUP BY 與 PARTITION BY 可將各成員分割至團隊得函數。</p>\n<h4 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h4><p>SQL 與 RDB 採用許多集合論以及群的成果，或許內容有點抽象，但也因為抽象內容，所以才廣泛應用。</p>\n<p>參考資料: </p>\n<ol>\n<li>SQL 達人的工作現場攻略筆記</li>\n</ol>\n","site":{"data":{"next.cofnig":{"override":false,"reminder":false,"cache":{"enable":true},"minify":false,"custom_file_path":{"style":"source/_data/styles.styl"},"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"language_switcher":false,"footer":{"icon":{"name":"fa fa-heart","animated":false,"color":"#ff0000"},"copyright":null,"powered":true,"beian":{"enable":false,"icp":null,"gongan_id":null,"gongan_num":null,"gongan_icon_url":null}},"creative_commons":{"license":"by-nc-sa","sidebar":false,"post":false,"language":null},"scheme":"Pisces","darkmode":false,"menu":{"home":"/ || fa fa-home","about":"/me || fa fa-user","tags":"/tags/ || fa fa-tags","categories":"/categories/ || fa fa-th","archives":"/archives/ || fa fa-archive"},"menu_icons":{"enable":true},"menu_settings":{"icons":true,"badges":false},"sidebar":{"position":"left","display":"post","padding":18,"offset":12,"onmobile":false},"avatar":{"url":"/images/1.jpeg","rounded":false,"rotated":false},"site_state":true,"social":{"GitHub":"https://github.com/LueZero || fab fa-github","E-Mail":"a0970937127@gmail.com || fa fa-envelope"},"social_icons":{"enable":true,"icons_only":false,"transition":false},"links_settings":{"icon":"fa fa-link","title":"Links","layout":"block"},"links":null,"toc":{"enable":true,"number":true,"wrap":false,"expand_all":false,"max_depth":6},"chat":{"enable":false,"icon":"fa fa-comment","text":"Chat"},"excerpt_description":true,"scroll_to_more":false,"auto_excerpt":{"enable":true,"length":100},"read_more_btn":true,"post_meta":{"item_text":true,"created_at":true,"updated_at":{"enable":true,"another_day":true},"categories":true},"symbols_count_time":{"separated_meta":false,"item_text_post":true,"item_text_total":false,"symbols":true,"time":true,"total_symbols":false,"total_time":false,"exclude_codeblock":false,"awl":4,"wpm":275,"suffix":"分鐘"},"tag_icon":false,"reward_settings":{"enable":false,"animation":false},"reward":null,"follow_me":null,"related_posts":{"enable":false,"title":null,"display_in_home":false,"params":{"maxCount":5}},"post_edit":{"enable":false,"url":"https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name"},"post_navigation":"left","tagcloud":{"min":12,"max":30,"start":"#ccc","end":"#111","amount":200},"calendar":{"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"showDeleted":false,"singleEvents":true,"maxResults":250},"text_align":{"desktop":"justify","mobile":"justify"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":null,"codeblock":{"highlight_theme":"normal","copy_button":{"enable":false,"show_result":false,"style":null}},"back2top":{"enable":true,"sidebar":false,"scrollpercent":false},"reading_progress":{"enable":false,"position":"top","color":"#37c6c0","height":"3px"},"bookmark":{"enable":false,"color":"#222","save":"auto"},"github_banner":{"enable":false,"permalink":"https://github.com/yourname","title":"Follow me on GitHub"},"font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"title":{"external":true,"family":null,"size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"codes":{"external":true,"family":null}},"disable_baidu_transformation":false,"index_with_subtitle":false,"exturl":false,"google_site_verification":null,"bing_site_verification":null,"yandex_site_verification":null,"baidu_site_verification":null,"baidu_push":false,"math":{"per_page":true,"mathjax":{"enable":false,"mhchem":false},"katex":{"enable":false,"copy_tex":false}},"pjax":false,"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"quicklink":{"enable":false,"home":false,"archive":false,"delay":true,"timeout":3000,"priority":true,"ignores":null},"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"disqus":{"enable":false,"shortname":null,"count":true},"disqusjs":{"enable":false,"api":null,"apikey":null,"shortname":null},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10,"language":null,"visitor":false,"comment_count":true,"recordIP":false,"serverURLs":null},"livere_uid":null,"gitalk":{"enable":false,"github_id":null,"repo":null,"client_id":null,"client_secret":null,"admin_user":null,"distraction_free_mode":true,"language":null},"rating":{"enable":false,"id":null,"color":"fc6423"},"add_this_id":null,"google_analytics":{"tracking_id":null,"only_pageview":false},"baidu_analytics":null,"growingio_analytics":null,"cnzz_siteid":null,"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null,"server_url":null,"security":true},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null},"busuanzi_count":{"enable":false,"total_visitors":true,"total_visitors_icon":"fa fa-user","total_views":true,"total_views_icon":"fa fa-eye","post_views":true,"post_views_icon":"fa fa-eye"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"swiftype_key":null,"chatra":{"enable":false,"async":true,"id":null},"tidio":{"enable":false,"key":null},"note":{"style":"simple","icons":false,"light_bg_offset":0},"tabs":{"transition":{"tabs":false,"labels":true}},"pdf":{"enable":false,"height":"500px"},"mermaid":{"enable":false,"theme":"forest"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"pace":{"enable":false,"theme":"minimal"},"three":{"enable":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","anime":null,"fontawesome":null,"mathjax":null,"katex":null,"copy_tex_js":null,"copy_tex_css":null,"pjax":null,"jquery":null,"fancybox":null,"fancybox_css":null,"mediumzoom":null,"lazyload":null,"pangu":null,"quicklink":null,"disqusjs_js":null,"disqusjs_css":null,"valine":null,"gitalk_js":null,"gitalk_css":null,"algolia_search":null,"instant_search":null,"mermaid":null,"velocity":null,"velocity_ui":null,"pace":null,"pace_css":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null},"css":"css","js":"js","images":"images","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":false}},"styles":""}},"excerpt":"大家了解兩者的差異嗎?\n * group by: 對檢索結果的保留行進行單純分組，返回聚合之後的組的數據統計值的記錄。劃分為多組，每組返回一行。\n   \n   \n * partition by: 返回分組裡的每一條數據，在應用關聯的視窗函數前確定行集的分區和排序，然後，視窗函數將計算每一行的值。\n   \n   \n\nSQL 篩選各種資料時，最基本操作就是某種準備替資料分組。其實除了使用 SQL 之外，日常生活中整理資料、查詢資料時，替資料建群組。\n\n而在 SQL 中具有建立群組功能就是 GROUP BY 跟 PARTITION BY。這兩種方式都能利用資料表指定的 KEY 來分割資料，而兩者不同","more":"<h4 id=\"大家了解兩者的差異嗎\"><a href=\"#大家了解兩者的差異嗎\" class=\"headerlink\" title=\"大家了解兩者的差異嗎?\"></a>大家了解兩者的差異嗎?</h4><ul>\n<li><p>group by: 對檢索結果的保留行進行單純分組，返回聚合之後的組的數據統計值的記錄。劃分為多組，每組返回一行。</p>\n</li>\n<li><p>partition by: 返回分組裡的每一條數據，在應用關聯的視窗函數前確定行集的分區和排序，然後，視窗函數將計算每一行的值。</p>\n</li>\n</ul>\n<p>SQL 篩選各種資料時，最基本操作就是某種準備替資料分組。其實除了使用 SQL 之外，日常生活中整理資料、查詢資料時，替資料建群組。</p>\n<p>而在 SQL 中具有建立群組功能就是 GROUP BY 跟 PARTITION BY。這兩種方式都能利用資料表指定的 KEY 來分割資料，而兩者不同地方在於 GROUP BY 會再分割後，將資料彙整為一列，而 PARTITION BY 是將每一欄位取出整理。</p>\n<p>透過下列團隊成員資料表說明兩者差異。</p>\n<p>Teams</p>\n<table>\n<thead>\n<tr>\n<th>member</th>\n<th>team</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>郁文</td>\n<td>A</td>\n<td>28</td>\n</tr>\n<tr>\n<td>瑋乃</td>\n<td>A</td>\n<td>19</td>\n</tr>\n<tr>\n<td>銘仁</td>\n<td>A</td>\n<td>23</td>\n</tr>\n<tr>\n<td>靚儀</td>\n<td>B</td>\n<td>40</td>\n</tr>\n<tr>\n<td>勝朋</td>\n<td>B</td>\n<td>29</td>\n</tr>\n<tr>\n<td>美美</td>\n<td>C</td>\n<td>30</td>\n</tr>\n<tr>\n<td>建國</td>\n<td>D</td>\n<td>28</td>\n</tr>\n<tr>\n<td>崇恩</td>\n<td>D</td>\n<td>28</td>\n</tr>\n<tr>\n<td>連雅</td>\n<td>D</td>\n<td>24</td>\n</tr>\n<tr>\n<td>光城</td>\n<td>D</td>\n<td>22</td>\n</tr>\n</tbody></table>\n<p>若以 GROUP BY 與 PARTITION BY 處理這張資料表，可寫出取得團隊資訊的查詢。不管使用哪個陳述句，Teams 資料表都會先分割部分集合，再以SUM函數彙整或 RANK 排出順位。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">member</span>,team,age,</span><br><span class=\"line\"><span class=\"keyword\">RANK</span>() <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> team <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">DESC</span>) rn,</span><br><span class=\"line\"><span class=\"keyword\">DENSE_RANK</span>()  <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> team <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">DESC</span>) dense_rn,</span><br><span class=\"line\">ROW_NUMBER()  <span class=\"keyword\">OVER</span>(<span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> team <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> age <span class=\"keyword\">DESC</span>) row_num</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Teams</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> team, rn</span><br></pre></td></tr></table></figure>\n\n<p>結果:</p>\n<table>\n<thead>\n<tr>\n<th>member</th>\n<th>team</th>\n<th>age</th>\n<th>rn</th>\n<th>dense_rn</th>\n<th>row_num</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>郁文</td>\n<td>A</td>\n<td>28</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>銘仁</td>\n<td>A</td>\n<td>23</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>瑋乃</td>\n<td>A</td>\n<td>19</td>\n<td>3</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>靚儀</td>\n<td>B</td>\n<td>40</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>勝朋</td>\n<td>B</td>\n<td>29</td>\n<td>2</td>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>美美</td>\n<td>C</td>\n<td>30</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>建國</td>\n<td>D</td>\n<td>28</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>崇恩</td>\n<td>D</td>\n<td>28</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>連雅</td>\n<td>D</td>\n<td>24</td>\n<td>3</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>光城</td>\n<td>D</td>\n<td>22</td>\n<td>4</td>\n<td>3</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<p>根據書中 286頁圖片，使用圖形代表集合，是為了呈現分割，經過仔細觀察後發現</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每一個都不是空集合</span><br><span class=\"line\">部分集合總和等於分割前的集合</span><br><span class=\"line\">隨機從中挑選兩個集合出來，不會有共通得部分。</span><br></pre></td></tr></table></figure>\n<p>由於部分集合本來就是從資料表分割而來，所以不會有空集合，且部分集合的總和當然會是分割之的母體集合，所以不會有成員因為分割而失蹤。此外也不會有同時屬於兩個部分集合的成員。每一位成員必然隸屬一個集合。也就是說 GROUP BY 與 PARTITION BY 可將各成員分割至團隊得函數。</p>\n<h4 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h4><p>SQL 與 RDB 採用許多集合論以及群的成果，或許內容有點抽象，但也因為抽象內容，所以才廣泛應用。</p>\n<p>參考資料: </p>\n<ol>\n<li>SQL 達人的工作現場攻略筆記</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cldvglsv80003j8vzc4t4a3bd","category_id":"cldvglsvb0005j8vzg93805v6","_id":"cldvglsvf000cj8vz9r8613xn"},{"post_id":"cldvglsva0004j8vz84zl2oin","category_id":"cldvglsvb0005j8vzg93805v6","_id":"cldvglsvg000fj8vzfcil05u4"},{"post_id":"cldvglsvc0007j8vzaqtggztg","category_id":"cldvglsvb0005j8vzg93805v6","_id":"cldvglsvg000hj8vzayekd75a"}],"PostTag":[{"post_id":"cldvglsv80003j8vzc4t4a3bd","tag_id":"cldvglsvc0006j8vz461c5gmd","_id":"cldvglsvf000aj8vzfqgj1d4p"},{"post_id":"cldvglsva0004j8vz84zl2oin","tag_id":"cldvglsvc0006j8vz461c5gmd","_id":"cldvglsvg000ej8vz1iwy2gzb"},{"post_id":"cldvglsvc0007j8vzaqtggztg","tag_id":"cldvglsvc0006j8vz461c5gmd","_id":"cldvglsvg000gj8vze39rco9s"}],"Tag":[{"name":"資料庫","_id":"cldvglsvc0006j8vz461c5gmd"}]}}